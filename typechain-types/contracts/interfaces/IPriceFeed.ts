/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPriceFeed {
  export type FeeDataStruct = {
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    roundId: BigNumberish;
    exchangeCount: BigNumberish;
  };

  export type FeeDataStructOutput = [
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    roundId: bigint,
    exchangeCount: bigint
  ] & {
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    roundId: bigint;
    exchangeCount: bigint;
  };

  export type HistoricalQueryStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    maxResults: BigNumberish;
    includeMetadata: boolean;
  };

  export type HistoricalQueryStructOutput = [
    startTime: bigint,
    endTime: bigint,
    maxResults: bigint,
    includeMetadata: boolean
  ] & {
    startTime: bigint;
    endTime: bigint;
    maxResults: bigint;
    includeMetadata: boolean;
  };

  export type PriceDataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    roundId: BigNumberish;
    confidence: BigNumberish;
    source: string;
  };

  export type PriceDataStructOutput = [
    price: bigint,
    timestamp: bigint,
    roundId: bigint,
    confidence: bigint,
    source: string
  ] & {
    price: bigint;
    timestamp: bigint;
    roundId: bigint;
    confidence: bigint;
    source: string;
  };
}

export interface IPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decimals"
      | "description"
      | "getAverageFee"
      | "getDataFreshness"
      | "getDataQualityMetrics"
      | "getEmergencyStatus"
      | "getFallbackInfo"
      | "getFeeDataAtRound"
      | "getFeeVolatility"
      | "getHistoricalFeeData"
      | "getHistoricalPriceData"
      | "getLatestFeeData"
      | "getLatestPriceData"
      | "getOracleHealth"
      | "getPriceDataAtRound"
      | "getRoundData"
      | "getSupportedSources"
      | "latestRoundData"
      | "subscribeToFeeUpdates"
      | "subscribeToPriceUpdates"
      | "unsubscribeFromFeeUpdates"
      | "unsubscribeFromPriceUpdates"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataSourceAdded"
      | "DataSourceRemoved"
      | "FeeDataUpdated"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFreshness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataQualityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeVolatility",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalFeeData",
    values: [IPriceFeed.HistoricalQueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalPriceData",
    values: [IPriceFeed.HistoricalQueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFeeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToFeeUpdates",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToPriceUpdates",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeFromFeeUpdates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeFromPriceUpdates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFreshness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataQualityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToFeeUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToPriceUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeFromFeeUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeFromPriceUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace DataSourceAddedEvent {
  export type InputTuple = [source: string, timestamp: BigNumberish];
  export type OutputTuple = [source: string, timestamp: bigint];
  export interface OutputObject {
    source: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSourceRemovedEvent {
  export type InputTuple = [source: string, timestamp: BigNumberish];
  export type OutputTuple = [source: string, timestamp: bigint];
  export interface OutputObject {
    source: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDataUpdatedEvent {
  export type InputTuple = [
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    roundId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    cexFees: bigint[],
    dexFees: bigint[],
    roundId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    cexFees: bigint[];
    dexFees: bigint[];
    roundId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    price: BigNumberish,
    roundId: BigNumberish,
    timestamp: BigNumberish,
    confidence: BigNumberish
  ];
  export type OutputTuple = [
    price: bigint,
    roundId: bigint,
    timestamp: bigint,
    confidence: bigint
  ];
  export interface OutputObject {
    price: bigint;
    roundId: bigint;
    timestamp: bigint;
    confidence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceFeed;
  waitForDeployment(): Promise<this>;

  interface: IPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decimals: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  getAverageFee: TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { averageFee: bigint; sampleCount: bigint }],
    "view"
  >;

  getDataFreshness: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isFresh: boolean;
        lastUpdateTime: bigint;
        stalenessThreshold: bigint;
      }
    ],
    "view"
  >;

  getDataQualityMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        accuracy: bigint;
        precision: bigint;
        reliability: bigint;
        coverage: bigint;
      }
    ],
    "view"
  >;

  getEmergencyStatus: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        isEmergency: boolean;
        emergencyType: string;
        emergencyStartTime: bigint;
      }
    ],
    "view"
  >;

  getFallbackInfo: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        hasFallback: boolean;
        fallbackSource: string;
        fallbackTimestamp: bigint;
      }
    ],
    "view"
  >;

  getFeeDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;

  getFeeVolatility: TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { volatility: bigint; confidence: bigint }],
    "view"
  >;

  getHistoricalFeeData: TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.FeeDataStructOutput[]],
    "view"
  >;

  getHistoricalPriceData: TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.PriceDataStructOutput[]],
    "view"
  >;

  getLatestFeeData: TypedContractMethod<
    [],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;

  getLatestPriceData: TypedContractMethod<
    [],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;

  getOracleHealth: TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint] & {
        isHealthy: boolean;
        consensusReached: boolean;
        activeNodes: bigint;
        lastConsensusTime: bigint;
      }
    ],
    "view"
  >;

  getPriceDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  getSupportedSources: TypedContractMethod<[], [string[]], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  subscribeToFeeUpdates: TypedContractMethod<
    [
      subscriber: AddressLike,
      feeThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  subscribeToPriceUpdates: TypedContractMethod<
    [
      subscriber: AddressLike,
      priceThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  unsubscribeFromFeeUpdates: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  unsubscribeFromPriceUpdates: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAverageFee"
  ): TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { averageFee: bigint; sampleCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataFreshness"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isFresh: boolean;
        lastUpdateTime: bigint;
        stalenessThreshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataQualityMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        accuracy: bigint;
        precision: bigint;
        reliability: bigint;
        coverage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencyStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        isEmergency: boolean;
        emergencyType: string;
        emergencyStartTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFallbackInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        hasFallback: boolean;
        fallbackSource: string;
        fallbackTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeVolatility"
  ): TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { volatility: bigint; confidence: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoricalFeeData"
  ): TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.FeeDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoricalPriceData"
  ): TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.PriceDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestFeeData"
  ): TypedContractMethod<[], [IPriceFeed.FeeDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLatestPriceData"
  ): TypedContractMethod<[], [IPriceFeed.PriceDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getOracleHealth"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint] & {
        isHealthy: boolean;
        consensusReached: boolean;
        activeNodes: bigint;
        lastConsensusTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundData"
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedSources"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "latestRoundData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscribeToFeeUpdates"
  ): TypedContractMethod<
    [
      subscriber: AddressLike,
      feeThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribeToPriceUpdates"
  ): TypedContractMethod<
    [
      subscriber: AddressLike,
      priceThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unsubscribeFromFeeUpdates"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsubscribeFromPriceUpdates"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DataSourceAdded"
  ): TypedContractEvent<
    DataSourceAddedEvent.InputTuple,
    DataSourceAddedEvent.OutputTuple,
    DataSourceAddedEvent.OutputObject
  >;
  getEvent(
    key: "DataSourceRemoved"
  ): TypedContractEvent<
    DataSourceRemovedEvent.InputTuple,
    DataSourceRemovedEvent.OutputTuple,
    DataSourceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FeeDataUpdated"
  ): TypedContractEvent<
    FeeDataUpdatedEvent.InputTuple,
    FeeDataUpdatedEvent.OutputTuple,
    FeeDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "DataSourceAdded(string,uint256)": TypedContractEvent<
      DataSourceAddedEvent.InputTuple,
      DataSourceAddedEvent.OutputTuple,
      DataSourceAddedEvent.OutputObject
    >;
    DataSourceAdded: TypedContractEvent<
      DataSourceAddedEvent.InputTuple,
      DataSourceAddedEvent.OutputTuple,
      DataSourceAddedEvent.OutputObject
    >;

    "DataSourceRemoved(string,uint256)": TypedContractEvent<
      DataSourceRemovedEvent.InputTuple,
      DataSourceRemovedEvent.OutputTuple,
      DataSourceRemovedEvent.OutputObject
    >;
    DataSourceRemoved: TypedContractEvent<
      DataSourceRemovedEvent.InputTuple,
      DataSourceRemovedEvent.OutputTuple,
      DataSourceRemovedEvent.OutputObject
    >;

    "FeeDataUpdated(uint256[],uint256[],uint80,uint256)": TypedContractEvent<
      FeeDataUpdatedEvent.InputTuple,
      FeeDataUpdatedEvent.OutputTuple,
      FeeDataUpdatedEvent.OutputObject
    >;
    FeeDataUpdated: TypedContractEvent<
      FeeDataUpdatedEvent.InputTuple,
      FeeDataUpdatedEvent.OutputTuple,
      FeeDataUpdatedEvent.OutputObject
    >;

    "PriceUpdated(int256,uint80,uint256,uint8)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}

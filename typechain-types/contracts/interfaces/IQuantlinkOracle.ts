/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IQuantlinkOracle {
  export type FeeDataStruct = {
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
    consensusReached: boolean;
    participatingNodes: BigNumberish;
  };

  export type FeeDataStructOutput = [
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    blockNumber: bigint,
    consensusReached: boolean,
    participatingNodes: bigint
  ] & {
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    blockNumber: bigint;
    consensusReached: boolean;
    participatingNodes: bigint;
  };

  export type ConsensusRoundStruct = {
    roundId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    submissionsCount: BigNumberish;
    consensusReached: boolean;
    finalData: IQuantlinkOracle.FeeDataStruct;
  };

  export type ConsensusRoundStructOutput = [
    roundId: bigint,
    startTime: bigint,
    endTime: bigint,
    submissionsCount: bigint,
    consensusReached: boolean,
    finalData: IQuantlinkOracle.FeeDataStructOutput
  ] & {
    roundId: bigint;
    startTime: bigint;
    endTime: bigint;
    submissionsCount: bigint;
    consensusReached: boolean;
    finalData: IQuantlinkOracle.FeeDataStructOutput;
  };
}

export interface IQuantlinkOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNode"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getConsensusThreshold"
      | "getCurrentRound"
      | "getCurrentSubmitter"
      | "getFeeDataAtRound"
      | "getLatestFeeData"
      | "getNextRotationTime"
      | "getTotalNodes"
      | "getUpdateInterval"
      | "isNodeActive"
      | "processConsensus"
      | "removeNode"
      | "rotateSubmitter"
      | "submitData"
      | "updateConsensusThreshold"
      | "updateUpdateInterval"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConsensusFailed"
      | "ConsensusReached"
      | "ConsensusRoundEnded"
      | "ConsensusRoundStarted"
      | "DataSubmitted"
      | "EmergencyPaused"
      | "EmergencyUnpaused"
      | "NodeRotated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFeeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextRotationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitData",
    values: [BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsensusThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUpdateInterval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextRotationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUpdateInterval",
    data: BytesLike
  ): Result;
}

export namespace ConsensusFailedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    submissionsReceived: BigNumberish,
    requiredSubmissions: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    roundId: bigint,
    submissionsReceived: bigint,
    requiredSubmissions: bigint,
    reason: string
  ];
  export interface OutputObject {
    roundId: bigint;
    submissionsReceived: bigint;
    requiredSubmissions: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusReachedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    participatingNodes: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    cexFees: bigint[],
    dexFees: bigint[],
    participatingNodes: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    cexFees: bigint[];
    dexFees: bigint[];
    participatingNodes: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusRoundEndedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    endTime: BigNumberish,
    consensusReached: boolean
  ];
  export type OutputTuple = [
    roundId: bigint,
    endTime: bigint,
    consensusReached: boolean
  ];
  export interface OutputObject {
    roundId: bigint;
    endTime: bigint;
    consensusReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusRoundStartedEvent {
  export type InputTuple = [roundId: BigNumberish, startTime: BigNumberish];
  export type OutputTuple = [roundId: bigint, startTime: bigint];
  export interface OutputObject {
    roundId: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSubmittedEvent {
  export type InputTuple = [
    node: AddressLike,
    roundId: BigNumberish,
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    roundId: bigint,
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    roundId: bigint;
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPausedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyUnpausedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRotatedEvent {
  export type InputTuple = [
    oldSubmitter: AddressLike,
    newSubmitter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldSubmitter: string,
    newSubmitter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldSubmitter: string;
    newSubmitter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IQuantlinkOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IQuantlinkOracle;
  waitForDeployment(): Promise<this>;

  interface: IQuantlinkOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getConsensusThreshold: TypedContractMethod<[], [bigint], "view">;

  getCurrentRound: TypedContractMethod<
    [],
    [IQuantlinkOracle.ConsensusRoundStructOutput],
    "view"
  >;

  getCurrentSubmitter: TypedContractMethod<[], [string], "view">;

  getFeeDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;

  getLatestFeeData: TypedContractMethod<
    [],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;

  getNextRotationTime: TypedContractMethod<[], [bigint], "view">;

  getTotalNodes: TypedContractMethod<[], [bigint], "view">;

  getUpdateInterval: TypedContractMethod<[], [bigint], "view">;

  isNodeActive: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  processConsensus: TypedContractMethod<[], [void], "nonpayable">;

  removeNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  rotateSubmitter: TypedContractMethod<[], [void], "nonpayable">;

  submitData: TypedContractMethod<
    [cexFees: BigNumberish[], dexFees: BigNumberish[], signature: BytesLike],
    [void],
    "nonpayable"
  >;

  updateConsensusThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUpdateInterval: TypedContractMethod<
    [newInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConsensusThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRound"
  ): TypedContractMethod<
    [],
    [IQuantlinkOracle.ConsensusRoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestFeeData"
  ): TypedContractMethod<[], [IQuantlinkOracle.FeeDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getNextRotationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUpdateInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isNodeActive"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "processConsensus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rotateSubmitter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitData"
  ): TypedContractMethod<
    [cexFees: BigNumberish[], dexFees: BigNumberish[], signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateConsensusThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUpdateInterval"
  ): TypedContractMethod<[newInterval: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ConsensusFailed"
  ): TypedContractEvent<
    ConsensusFailedEvent.InputTuple,
    ConsensusFailedEvent.OutputTuple,
    ConsensusFailedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusReached"
  ): TypedContractEvent<
    ConsensusReachedEvent.InputTuple,
    ConsensusReachedEvent.OutputTuple,
    ConsensusReachedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusRoundEnded"
  ): TypedContractEvent<
    ConsensusRoundEndedEvent.InputTuple,
    ConsensusRoundEndedEvent.OutputTuple,
    ConsensusRoundEndedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusRoundStarted"
  ): TypedContractEvent<
    ConsensusRoundStartedEvent.InputTuple,
    ConsensusRoundStartedEvent.OutputTuple,
    ConsensusRoundStartedEvent.OutputObject
  >;
  getEvent(
    key: "DataSubmitted"
  ): TypedContractEvent<
    DataSubmittedEvent.InputTuple,
    DataSubmittedEvent.OutputTuple,
    DataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPaused"
  ): TypedContractEvent<
    EmergencyPausedEvent.InputTuple,
    EmergencyPausedEvent.OutputTuple,
    EmergencyPausedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyUnpaused"
  ): TypedContractEvent<
    EmergencyUnpausedEvent.InputTuple,
    EmergencyUnpausedEvent.OutputTuple,
    EmergencyUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRotated"
  ): TypedContractEvent<
    NodeRotatedEvent.InputTuple,
    NodeRotatedEvent.OutputTuple,
    NodeRotatedEvent.OutputObject
  >;

  filters: {
    "ConsensusFailed(uint256,uint8,uint8,string)": TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;
    ConsensusFailed: TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;

    "ConsensusReached(uint256,uint256[],uint256[],uint8,uint256)": TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;
    ConsensusReached: TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;

    "ConsensusRoundEnded(uint256,uint256,bool)": TypedContractEvent<
      ConsensusRoundEndedEvent.InputTuple,
      ConsensusRoundEndedEvent.OutputTuple,
      ConsensusRoundEndedEvent.OutputObject
    >;
    ConsensusRoundEnded: TypedContractEvent<
      ConsensusRoundEndedEvent.InputTuple,
      ConsensusRoundEndedEvent.OutputTuple,
      ConsensusRoundEndedEvent.OutputObject
    >;

    "ConsensusRoundStarted(uint256,uint256)": TypedContractEvent<
      ConsensusRoundStartedEvent.InputTuple,
      ConsensusRoundStartedEvent.OutputTuple,
      ConsensusRoundStartedEvent.OutputObject
    >;
    ConsensusRoundStarted: TypedContractEvent<
      ConsensusRoundStartedEvent.InputTuple,
      ConsensusRoundStartedEvent.OutputTuple,
      ConsensusRoundStartedEvent.OutputObject
    >;

    "DataSubmitted(address,uint256,uint256[],uint256[],uint256)": TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;
    DataSubmitted: TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;

    "EmergencyPaused(address,uint256)": TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;
    EmergencyPaused: TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;

    "EmergencyUnpaused(address,uint256)": TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;
    EmergencyUnpaused: TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;

    "NodeRotated(address,address,uint256)": TypedContractEvent<
      NodeRotatedEvent.InputTuple,
      NodeRotatedEvent.OutputTuple,
      NodeRotatedEvent.OutputObject
    >;
    NodeRotated: TypedContractEvent<
      NodeRotatedEvent.InputTuple,
      NodeRotatedEvent.OutputTuple,
      NodeRotatedEvent.OutputObject
    >;
  };
}

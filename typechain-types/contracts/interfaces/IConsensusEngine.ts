/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IConsensusEngine {
  export type AggregationResultStruct = {
    aggregatedCexFees: BigNumberish[];
    aggregatedDexFees: BigNumberish[];
    confidence: BigNumberish;
    variance: BigNumberish;
    method: string;
  };

  export type AggregationResultStructOutput = [
    aggregatedCexFees: bigint[],
    aggregatedDexFees: bigint[],
    confidence: bigint,
    variance: bigint,
    method: string
  ] & {
    aggregatedCexFees: bigint[];
    aggregatedDexFees: bigint[];
    confidence: bigint;
    variance: bigint;
    method: string;
  };

  export type ConsensusStatsStruct = {
    totalVotes: BigNumberish;
    requiredVotes: BigNumberish;
    consensusReached: boolean;
    agreementPercentage: BigNumberish;
    outlierNodes: AddressLike[];
  };

  export type ConsensusStatsStructOutput = [
    totalVotes: bigint,
    requiredVotes: bigint,
    consensusReached: boolean,
    agreementPercentage: bigint,
    outlierNodes: string[]
  ] & {
    totalVotes: bigint;
    requiredVotes: bigint;
    consensusReached: boolean;
    agreementPercentage: bigint;
    outlierNodes: string[];
  };

  export type VoteStruct = {
    voter: AddressLike;
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    weight: BigNumberish;
  };

  export type VoteStructOutput = [
    voter: string,
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    weight: bigint
  ] & {
    voter: string;
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    weight: bigint;
  };
}

export declare namespace IQuantlinkOracle {
  export type FeeDataStruct = {
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
    consensusReached: boolean;
    participatingNodes: BigNumberish;
  };

  export type FeeDataStructOutput = [
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    blockNumber: bigint,
    consensusReached: boolean,
    participatingNodes: bigint
  ] & {
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    blockNumber: bigint;
    consensusReached: boolean;
    participatingNodes: bigint;
  };
}

export interface IConsensusEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aggregateData"
      | "calculateDeviation"
      | "castVote"
      | "detectOutliers"
      | "finalizeRound"
      | "getAggregationMethod"
      | "getAggregationResult"
      | "getConsensusStats"
      | "getConsensusThreshold"
      | "getCurrentRoundVotes"
      | "getRequiredVotes"
      | "getVoteWeight"
      | "hasNodeVoted"
      | "isConsensusReached"
      | "processConsensus"
      | "resetRound"
      | "setAggregationMethod"
      | "setConsensusThreshold"
      | "setOutlierDetectionThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AggregationMethodChanged"
      | "ConsensusFailed"
      | "ConsensusReached"
      | "OutlierDetected"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "aggregateData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDeviation",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "detectOutliers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregationMethod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregationResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteWeight",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNodeVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsensusReached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processConsensus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregationMethod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsensusThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOutlierDetectionThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "detectOutliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregationMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregationResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNodeVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConsensusReached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAggregationMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOutlierDetectionThreshold",
    data: BytesLike
  ): Result;
}

export namespace AggregationMethodChangedEvent {
  export type InputTuple = [
    oldMethod: string,
    newMethod: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldMethod: string,
    newMethod: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldMethod: string;
    newMethod: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusFailedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    totalVotes: BigNumberish,
    requiredVotes: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    roundId: bigint,
    totalVotes: bigint,
    requiredVotes: bigint,
    reason: string
  ];
  export interface OutputObject {
    roundId: bigint;
    totalVotes: bigint;
    requiredVotes: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusReachedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    finalCexFees: BigNumberish[],
    finalDexFees: BigNumberish[],
    participatingNodes: BigNumberish,
    agreementPercentage: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    finalCexFees: bigint[],
    finalDexFees: bigint[],
    participatingNodes: bigint,
    agreementPercentage: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    finalCexFees: bigint[];
    finalDexFees: bigint[];
    participatingNodes: bigint;
    agreementPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OutlierDetectedEvent {
  export type InputTuple = [
    node: AddressLike,
    roundId: BigNumberish,
    deviation: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    node: string,
    roundId: bigint,
    deviation: bigint,
    reason: string
  ];
  export interface OutputObject {
    node: string;
    roundId: bigint;
    deviation: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    voter: AddressLike,
    roundId: BigNumberish,
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    weight: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    roundId: bigint,
    cexFees: bigint[],
    dexFees: bigint[],
    weight: bigint
  ];
  export interface OutputObject {
    voter: string;
    roundId: bigint;
    cexFees: bigint[];
    dexFees: bigint[];
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConsensusEngine extends BaseContract {
  connect(runner?: ContractRunner | null): IConsensusEngine;
  waitForDeployment(): Promise<this>;

  interface: IConsensusEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aggregateData: TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.AggregationResultStructOutput],
    "nonpayable"
  >;

  calculateDeviation: TypedContractMethod<
    [data1: BigNumberish[], data2: BigNumberish[]],
    [bigint],
    "view"
  >;

  castVote: TypedContractMethod<
    [
      roundId: BigNumberish,
      voter: AddressLike,
      cexFees: BigNumberish[],
      dexFees: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  detectOutliers: TypedContractMethod<
    [roundId: BigNumberish],
    [string[]],
    "nonpayable"
  >;

  finalizeRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "nonpayable"
  >;

  getAggregationMethod: TypedContractMethod<[], [string], "view">;

  getAggregationResult: TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.AggregationResultStructOutput],
    "view"
  >;

  getConsensusStats: TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.ConsensusStatsStructOutput],
    "view"
  >;

  getConsensusThreshold: TypedContractMethod<[], [bigint], "view">;

  getCurrentRoundVotes: TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.VoteStructOutput[]],
    "view"
  >;

  getRequiredVotes: TypedContractMethod<[], [bigint], "view">;

  getVoteWeight: TypedContractMethod<[node: AddressLike], [bigint], "view">;

  hasNodeVoted: TypedContractMethod<
    [roundId: BigNumberish, node: AddressLike],
    [boolean],
    "view"
  >;

  isConsensusReached: TypedContractMethod<
    [roundId: BigNumberish],
    [boolean],
    "view"
  >;

  processConsensus: TypedContractMethod<
    [roundId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  resetRound: TypedContractMethod<
    [roundId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAggregationMethod: TypedContractMethod<
    [method: string],
    [void],
    "nonpayable"
  >;

  setConsensusThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOutlierDetectionThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aggregateData"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.AggregationResultStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateDeviation"
  ): TypedContractMethod<
    [data1: BigNumberish[], data2: BigNumberish[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      roundId: BigNumberish,
      voter: AddressLike,
      cexFees: BigNumberish[],
      dexFees: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "detectOutliers"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAggregationMethod"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAggregationResult"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.AggregationResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConsensusStats"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.ConsensusStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConsensusThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRoundVotes"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IConsensusEngine.VoteStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequiredVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoteWeight"
  ): TypedContractMethod<[node: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasNodeVoted"
  ): TypedContractMethod<
    [roundId: BigNumberish, node: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isConsensusReached"
  ): TypedContractMethod<[roundId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "processConsensus"
  ): TypedContractMethod<[roundId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "resetRound"
  ): TypedContractMethod<[roundId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAggregationMethod"
  ): TypedContractMethod<[method: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConsensusThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOutlierDetectionThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AggregationMethodChanged"
  ): TypedContractEvent<
    AggregationMethodChangedEvent.InputTuple,
    AggregationMethodChangedEvent.OutputTuple,
    AggregationMethodChangedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusFailed"
  ): TypedContractEvent<
    ConsensusFailedEvent.InputTuple,
    ConsensusFailedEvent.OutputTuple,
    ConsensusFailedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusReached"
  ): TypedContractEvent<
    ConsensusReachedEvent.InputTuple,
    ConsensusReachedEvent.OutputTuple,
    ConsensusReachedEvent.OutputObject
  >;
  getEvent(
    key: "OutlierDetected"
  ): TypedContractEvent<
    OutlierDetectedEvent.InputTuple,
    OutlierDetectedEvent.OutputTuple,
    OutlierDetectedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "AggregationMethodChanged(string,string,uint256)": TypedContractEvent<
      AggregationMethodChangedEvent.InputTuple,
      AggregationMethodChangedEvent.OutputTuple,
      AggregationMethodChangedEvent.OutputObject
    >;
    AggregationMethodChanged: TypedContractEvent<
      AggregationMethodChangedEvent.InputTuple,
      AggregationMethodChangedEvent.OutputTuple,
      AggregationMethodChangedEvent.OutputObject
    >;

    "ConsensusFailed(uint256,uint8,uint8,string)": TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;
    ConsensusFailed: TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;

    "ConsensusReached(uint256,uint256[],uint256[],uint8,uint8)": TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;
    ConsensusReached: TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;

    "OutlierDetected(address,uint256,uint256,string)": TypedContractEvent<
      OutlierDetectedEvent.InputTuple,
      OutlierDetectedEvent.OutputTuple,
      OutlierDetectedEvent.OutputObject
    >;
    OutlierDetected: TypedContractEvent<
      OutlierDetectedEvent.InputTuple,
      OutlierDetectedEvent.OutputTuple,
      OutlierDetectedEvent.OutputObject
    >;

    "VoteCast(address,uint256,uint256[],uint256[],uint8)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}

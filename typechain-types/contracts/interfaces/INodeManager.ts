/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INodeManager {
  export type OracleNodeStruct = {
    nodeAddress: AddressLike;
    publicKey: BytesLike;
    state: BigNumberish;
    registrationTime: BigNumberish;
    lastActiveTime: BigNumberish;
    submissionCount: BigNumberish;
    consensusParticipation: BigNumberish;
    reputation: BigNumberish;
    isBackup: boolean;
    successfulSubmissions: BigNumberish;
    failedSubmissions: BigNumberish;
    averageResponseTime: BigNumberish;
    uptime: BigNumberish;
    lastDowntime: BigNumberish;
    totalEarnings: BigNumberish;
    performanceScore: BigNumberish;
  };

  export type OracleNodeStructOutput = [
    nodeAddress: string,
    publicKey: string,
    state: bigint,
    registrationTime: bigint,
    lastActiveTime: bigint,
    submissionCount: bigint,
    consensusParticipation: bigint,
    reputation: bigint,
    isBackup: boolean,
    successfulSubmissions: bigint,
    failedSubmissions: bigint,
    averageResponseTime: bigint,
    uptime: bigint,
    lastDowntime: bigint,
    totalEarnings: bigint,
    performanceScore: bigint
  ] & {
    nodeAddress: string;
    publicKey: string;
    state: bigint;
    registrationTime: bigint;
    lastActiveTime: bigint;
    submissionCount: bigint;
    consensusParticipation: bigint;
    reputation: bigint;
    isBackup: boolean;
    successfulSubmissions: bigint;
    failedSubmissions: bigint;
    averageResponseTime: bigint;
    uptime: bigint;
    lastDowntime: bigint;
    totalEarnings: bigint;
    performanceScore: bigint;
  };

  export type RotationScheduleStruct = {
    currentSubmitter: AddressLike;
    nextSubmitter: AddressLike;
    rotationTime: BigNumberish;
    rotationInterval: BigNumberish;
  };

  export type RotationScheduleStructOutput = [
    currentSubmitter: string,
    nextSubmitter: string,
    rotationTime: bigint,
    rotationInterval: bigint
  ] & {
    currentSubmitter: string;
    nextSubmitter: string;
    rotationTime: bigint;
    rotationInterval: bigint;
  };
}

export interface INodeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateBackupNode"
      | "activateNode"
      | "canNodeSubmit"
      | "deactivateNode"
      | "emergencyActivateBackup"
      | "forceRotation"
      | "getAllActiveNodes"
      | "getBackupNodes"
      | "getCurrentSubmitter"
      | "getNextSubmitter"
      | "getNode"
      | "getNodeReputation"
      | "getRotationSchedule"
      | "getSubmitterNodes"
      | "getTotalActiveNodes"
      | "getValidatorNodes"
      | "isNodeActive"
      | "isNodeSubmitter"
      | "isNodeValidator"
      | "recordConsensusParticipation"
      | "recordNodeActivity"
      | "registerNode"
      | "rotateSubmitter"
      | "setRotationInterval"
      | "suspendNode"
      | "updateNodeReputation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BackupNodeActivated"
      | "NodeActivated"
      | "NodeDeactivated"
      | "NodeRegistered"
      | "NodeReputationUpdated"
      | "NodeSuspended"
      | "SubmitterRotated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateBackupNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activateNode",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canNodeSubmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActivateBackup",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRotation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBackupNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRotationSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmitterNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeSubmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordConsensusParticipation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordNodeActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRotationInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendNode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeReputation",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateBackupNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canNodeSubmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActivateBackup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackupNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodeReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRotationSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmitterNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordConsensusParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordNodeActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rotateSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRotationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeReputation",
    data: BytesLike
  ): Result;
}

export namespace BackupNodeActivatedEvent {
  export type InputTuple = [
    backupNode: AddressLike,
    failedNode: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    backupNode: string,
    failedNode: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    backupNode: string;
    failedNode: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeActivatedEvent {
  export type InputTuple = [
    node: AddressLike,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, newState: bigint, timestamp: bigint];
  export interface OutputObject {
    node: string;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeDeactivatedEvent {
  export type InputTuple = [
    node: AddressLike,
    previousState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    previousState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    previousState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRegisteredEvent {
  export type InputTuple = [
    node: AddressLike,
    publicKey: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    publicKey: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    publicKey: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeReputationUpdatedEvent {
  export type InputTuple = [
    node: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    node: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeSuspendedEvent {
  export type InputTuple = [
    node: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitterRotatedEvent {
  export type InputTuple = [
    oldSubmitter: AddressLike,
    newSubmitter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldSubmitter: string,
    newSubmitter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldSubmitter: string;
    newSubmitter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INodeManager extends BaseContract {
  connect(runner?: ContractRunner | null): INodeManager;
  waitForDeployment(): Promise<this>;

  interface: INodeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateBackupNode: TypedContractMethod<
    [failedNode: AddressLike],
    [string],
    "nonpayable"
  >;

  activateNode: TypedContractMethod<
    [nodeAddress: AddressLike, targetState: BigNumberish],
    [void],
    "nonpayable"
  >;

  canNodeSubmit: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  deactivateNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyActivateBackup: TypedContractMethod<
    [failedNode: AddressLike, backupNode: AddressLike],
    [void],
    "nonpayable"
  >;

  forceRotation: TypedContractMethod<
    [newSubmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllActiveNodes: TypedContractMethod<[], [string[]], "view">;

  getBackupNodes: TypedContractMethod<[], [string[]], "view">;

  getCurrentSubmitter: TypedContractMethod<[], [string], "view">;

  getNextSubmitter: TypedContractMethod<[], [string], "view">;

  getNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [INodeManager.OracleNodeStructOutput],
    "view"
  >;

  getNodeReputation: TypedContractMethod<[node: AddressLike], [bigint], "view">;

  getRotationSchedule: TypedContractMethod<
    [],
    [INodeManager.RotationScheduleStructOutput],
    "view"
  >;

  getSubmitterNodes: TypedContractMethod<[], [string[]], "view">;

  getTotalActiveNodes: TypedContractMethod<[], [bigint], "view">;

  getValidatorNodes: TypedContractMethod<[], [string[]], "view">;

  isNodeActive: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isNodeSubmitter: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isNodeValidator: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  recordConsensusParticipation: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  recordNodeActivity: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registerNode: TypedContractMethod<
    [nodeAddress: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  rotateSubmitter: TypedContractMethod<[], [string], "nonpayable">;

  setRotationInterval: TypedContractMethod<
    [newInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  suspendNode: TypedContractMethod<
    [nodeAddress: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  updateNodeReputation: TypedContractMethod<
    [nodeAddress: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateBackupNode"
  ): TypedContractMethod<[failedNode: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "activateNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, targetState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canNodeSubmit"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyActivateBackup"
  ): TypedContractMethod<
    [failedNode: AddressLike, backupNode: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceRotation"
  ): TypedContractMethod<[newSubmitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBackupNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [INodeManager.OracleNodeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodeReputation"
  ): TypedContractMethod<[node: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRotationSchedule"
  ): TypedContractMethod<
    [],
    [INodeManager.RotationScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmitterNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalActiveNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidatorNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isNodeActive"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNodeSubmitter"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNodeValidator"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordConsensusParticipation"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordNodeActivity"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rotateSubmitter"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setRotationInterval"
  ): TypedContractMethod<[newInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "suspendNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNodeReputation"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BackupNodeActivated"
  ): TypedContractEvent<
    BackupNodeActivatedEvent.InputTuple,
    BackupNodeActivatedEvent.OutputTuple,
    BackupNodeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeActivated"
  ): TypedContractEvent<
    NodeActivatedEvent.InputTuple,
    NodeActivatedEvent.OutputTuple,
    NodeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeDeactivated"
  ): TypedContractEvent<
    NodeDeactivatedEvent.InputTuple,
    NodeDeactivatedEvent.OutputTuple,
    NodeDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRegistered"
  ): TypedContractEvent<
    NodeRegisteredEvent.InputTuple,
    NodeRegisteredEvent.OutputTuple,
    NodeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NodeReputationUpdated"
  ): TypedContractEvent<
    NodeReputationUpdatedEvent.InputTuple,
    NodeReputationUpdatedEvent.OutputTuple,
    NodeReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeSuspended"
  ): TypedContractEvent<
    NodeSuspendedEvent.InputTuple,
    NodeSuspendedEvent.OutputTuple,
    NodeSuspendedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitterRotated"
  ): TypedContractEvent<
    SubmitterRotatedEvent.InputTuple,
    SubmitterRotatedEvent.OutputTuple,
    SubmitterRotatedEvent.OutputObject
  >;

  filters: {
    "BackupNodeActivated(address,address,uint256)": TypedContractEvent<
      BackupNodeActivatedEvent.InputTuple,
      BackupNodeActivatedEvent.OutputTuple,
      BackupNodeActivatedEvent.OutputObject
    >;
    BackupNodeActivated: TypedContractEvent<
      BackupNodeActivatedEvent.InputTuple,
      BackupNodeActivatedEvent.OutputTuple,
      BackupNodeActivatedEvent.OutputObject
    >;

    "NodeActivated(address,uint8,uint256)": TypedContractEvent<
      NodeActivatedEvent.InputTuple,
      NodeActivatedEvent.OutputTuple,
      NodeActivatedEvent.OutputObject
    >;
    NodeActivated: TypedContractEvent<
      NodeActivatedEvent.InputTuple,
      NodeActivatedEvent.OutputTuple,
      NodeActivatedEvent.OutputObject
    >;

    "NodeDeactivated(address,uint8,uint256)": TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;
    NodeDeactivated: TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;

    "NodeRegistered(address,bytes,uint256)": TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;
    NodeRegistered: TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;

    "NodeReputationUpdated(address,uint8,uint8)": TypedContractEvent<
      NodeReputationUpdatedEvent.InputTuple,
      NodeReputationUpdatedEvent.OutputTuple,
      NodeReputationUpdatedEvent.OutputObject
    >;
    NodeReputationUpdated: TypedContractEvent<
      NodeReputationUpdatedEvent.InputTuple,
      NodeReputationUpdatedEvent.OutputTuple,
      NodeReputationUpdatedEvent.OutputObject
    >;

    "NodeSuspended(address,string,uint256)": TypedContractEvent<
      NodeSuspendedEvent.InputTuple,
      NodeSuspendedEvent.OutputTuple,
      NodeSuspendedEvent.OutputObject
    >;
    NodeSuspended: TypedContractEvent<
      NodeSuspendedEvent.InputTuple,
      NodeSuspendedEvent.OutputTuple,
      NodeSuspendedEvent.OutputObject
    >;

    "SubmitterRotated(address,address,uint256)": TypedContractEvent<
      SubmitterRotatedEvent.InputTuple,
      SubmitterRotatedEvent.OutputTuple,
      SubmitterRotatedEvent.OutputObject
    >;
    SubmitterRotated: TypedContractEvent<
      SubmitterRotatedEvent.InputTuple,
      SubmitterRotatedEvent.OutputTuple,
      SubmitterRotatedEvent.OutputObject
    >;
  };
}

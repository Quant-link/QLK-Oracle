/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ProtocolIntegration {
  export type IntegrationConfigStruct = {
    protocol: AddressLike;
    integrationType: BigNumberish;
    priceFeed: AddressLike;
    updateFrequency: BigNumberish;
    stalenessThreshold: BigNumberish;
    isActive: boolean;
    lastUpdate: BigNumberish;
    customConfig: BytesLike;
  };

  export type IntegrationConfigStructOutput = [
    protocol: string,
    integrationType: bigint,
    priceFeed: string,
    updateFrequency: bigint,
    stalenessThreshold: bigint,
    isActive: boolean,
    lastUpdate: bigint,
    customConfig: string
  ] & {
    protocol: string;
    integrationType: bigint;
    priceFeed: string;
    updateFrequency: bigint;
    stalenessThreshold: bigint;
    isActive: boolean;
    lastUpdate: bigint;
    customConfig: string;
  };

  export type FeeCalculationParamsStruct = {
    baseFeeBps: BigNumberish;
    maxFeeBps: BigNumberish;
    minFeeBps: BigNumberish;
    volatilityMultiplier: BigNumberish;
    useOracleFees: boolean;
  };

  export type FeeCalculationParamsStructOutput = [
    baseFeeBps: bigint,
    maxFeeBps: bigint,
    minFeeBps: bigint,
    volatilityMultiplier: bigint,
    useOracleFees: boolean
  ] & {
    baseFeeBps: bigint;
    maxFeeBps: bigint;
    minFeeBps: bigint;
    volatilityMultiplier: bigint;
    useOracleFees: boolean;
  };

  export type HealthCheckConfigStruct = {
    maxStaleness: BigNumberish;
    minConfidence: BigNumberish;
    minActiveNodes: BigNumberish;
    requireConsensus: boolean;
    fallbackOracle: AddressLike;
  };

  export type HealthCheckConfigStructOutput = [
    maxStaleness: bigint,
    minConfidence: bigint,
    minActiveNodes: bigint,
    requireConsensus: boolean,
    fallbackOracle: string
  ] & {
    maxStaleness: bigint;
    minConfidence: bigint;
    minActiveNodes: bigint;
    requireConsensus: boolean;
    fallbackOracle: string;
  };
}

export interface ProtocolIntegrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "PROTOCOL_ROLE"
      | "calculateFee"
      | "deregisterProtocol"
      | "getIntegrationStatus"
      | "getRegisteredProtocols"
      | "getRoleAdmin"
      | "getTotalIntegrations"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "performHealthCheck"
      | "registerProtocol"
      | "renounceRole"
      | "revokeRole"
      | "setFeeCalculationParams"
      | "setHealthCheckConfig"
      | "supportsInterface"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyFallbackActivated"
      | "FeeCalculated"
      | "HealthCheckPerformed"
      | "Initialized"
      | "ProtocolDeregistered"
      | "ProtocolRegistered"
      | "ProtocolUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deregisterProtocol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntegrationStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredProtocols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalIntegrations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performHealthCheck",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProtocol",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCalculationParams",
    values: [AddressLike, ProtocolIntegration.FeeCalculationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthCheckConfig",
    values: [AddressLike, ProtocolIntegration.HealthCheckConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deregisterProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntegrationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalIntegrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performHealthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCalculationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthCheckConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace EmergencyFallbackActivatedEvent {
  export type InputTuple = [
    protocol: AddressLike,
    fallbackOracle: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    protocol: string,
    fallbackOracle: string,
    reason: string
  ];
  export interface OutputObject {
    protocol: string;
    fallbackOracle: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCalculatedEvent {
  export type InputTuple = [
    protocol: AddressLike,
    amount: BigNumberish,
    calculatedFee: BigNumberish,
    oracleFee: BigNumberish
  ];
  export type OutputTuple = [
    protocol: string,
    amount: bigint,
    calculatedFee: bigint,
    oracleFee: bigint
  ];
  export interface OutputObject {
    protocol: string;
    amount: bigint;
    calculatedFee: bigint;
    oracleFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealthCheckPerformedEvent {
  export type InputTuple = [
    protocol: AddressLike,
    isHealthy: boolean,
    reason: string
  ];
  export type OutputTuple = [
    protocol: string,
    isHealthy: boolean,
    reason: string
  ];
  export interface OutputObject {
    protocol: string;
    isHealthy: boolean;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolDeregisteredEvent {
  export type InputTuple = [protocol: AddressLike];
  export type OutputTuple = [protocol: string];
  export interface OutputObject {
    protocol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolRegisteredEvent {
  export type InputTuple = [
    protocol: AddressLike,
    integrationType: BigNumberish,
    priceFeed: AddressLike
  ];
  export type OutputTuple = [
    protocol: string,
    integrationType: bigint,
    priceFeed: string
  ];
  export interface OutputObject {
    protocol: string;
    integrationType: bigint;
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolUpdatedEvent {
  export type InputTuple = [
    protocol: AddressLike,
    oldType: BigNumberish,
    newType: BigNumberish
  ];
  export type OutputTuple = [
    protocol: string,
    oldType: bigint,
    newType: bigint
  ];
  export interface OutputObject {
    protocol: string;
    oldType: bigint;
    newType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProtocolIntegration extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolIntegration;
  waitForDeployment(): Promise<this>;

  interface: ProtocolIntegrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  PROTOCOL_ROLE: TypedContractMethod<[], [string], "view">;

  calculateFee: TypedContractMethod<
    [protocol: AddressLike, amount: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { calculatedFee: bigint; oracleFee: bigint }],
    "view"
  >;

  deregisterProtocol: TypedContractMethod<
    [protocol: AddressLike],
    [void],
    "nonpayable"
  >;

  getIntegrationStatus: TypedContractMethod<
    [protocol: AddressLike],
    [
      [ProtocolIntegration.IntegrationConfigStructOutput, bigint, boolean] & {
        config: ProtocolIntegration.IntegrationConfigStructOutput;
        lastHealthCheck: bigint;
        isHealthy: boolean;
      }
    ],
    "view"
  >;

  getRegisteredProtocols: TypedContractMethod<[], [string[]], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalIntegrations: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  performHealthCheck: TypedContractMethod<
    [protocol: AddressLike],
    [[boolean, string] & { isHealthy: boolean; reason: string }],
    "nonpayable"
  >;

  registerProtocol: TypedContractMethod<
    [
      protocol: AddressLike,
      integrationType: BigNumberish,
      priceFeed: AddressLike,
      updateFrequency: BigNumberish,
      customConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeCalculationParams: TypedContractMethod<
    [
      protocol: AddressLike,
      params: ProtocolIntegration.FeeCalculationParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  setHealthCheckConfig: TypedContractMethod<
    [
      protocol: AddressLike,
      config: ProtocolIntegration.HealthCheckConfigStruct
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [protocol: AddressLike, amount: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { calculatedFee: bigint; oracleFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "deregisterProtocol"
  ): TypedContractMethod<[protocol: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getIntegrationStatus"
  ): TypedContractMethod<
    [protocol: AddressLike],
    [
      [ProtocolIntegration.IntegrationConfigStructOutput, bigint, boolean] & {
        config: ProtocolIntegration.IntegrationConfigStructOutput;
        lastHealthCheck: bigint;
        isHealthy: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRegisteredProtocols"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalIntegrations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performHealthCheck"
  ): TypedContractMethod<
    [protocol: AddressLike],
    [[boolean, string] & { isHealthy: boolean; reason: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProtocol"
  ): TypedContractMethod<
    [
      protocol: AddressLike,
      integrationType: BigNumberish,
      priceFeed: AddressLike,
      updateFrequency: BigNumberish,
      customConfig: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeCalculationParams"
  ): TypedContractMethod<
    [
      protocol: AddressLike,
      params: ProtocolIntegration.FeeCalculationParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHealthCheckConfig"
  ): TypedContractMethod<
    [
      protocol: AddressLike,
      config: ProtocolIntegration.HealthCheckConfigStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EmergencyFallbackActivated"
  ): TypedContractEvent<
    EmergencyFallbackActivatedEvent.InputTuple,
    EmergencyFallbackActivatedEvent.OutputTuple,
    EmergencyFallbackActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCalculated"
  ): TypedContractEvent<
    FeeCalculatedEvent.InputTuple,
    FeeCalculatedEvent.OutputTuple,
    FeeCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "HealthCheckPerformed"
  ): TypedContractEvent<
    HealthCheckPerformedEvent.InputTuple,
    HealthCheckPerformedEvent.OutputTuple,
    HealthCheckPerformedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolDeregistered"
  ): TypedContractEvent<
    ProtocolDeregisteredEvent.InputTuple,
    ProtocolDeregisteredEvent.OutputTuple,
    ProtocolDeregisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolRegistered"
  ): TypedContractEvent<
    ProtocolRegisteredEvent.InputTuple,
    ProtocolRegisteredEvent.OutputTuple,
    ProtocolRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolUpdated"
  ): TypedContractEvent<
    ProtocolUpdatedEvent.InputTuple,
    ProtocolUpdatedEvent.OutputTuple,
    ProtocolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "EmergencyFallbackActivated(address,address,string)": TypedContractEvent<
      EmergencyFallbackActivatedEvent.InputTuple,
      EmergencyFallbackActivatedEvent.OutputTuple,
      EmergencyFallbackActivatedEvent.OutputObject
    >;
    EmergencyFallbackActivated: TypedContractEvent<
      EmergencyFallbackActivatedEvent.InputTuple,
      EmergencyFallbackActivatedEvent.OutputTuple,
      EmergencyFallbackActivatedEvent.OutputObject
    >;

    "FeeCalculated(address,uint256,uint256,uint256)": TypedContractEvent<
      FeeCalculatedEvent.InputTuple,
      FeeCalculatedEvent.OutputTuple,
      FeeCalculatedEvent.OutputObject
    >;
    FeeCalculated: TypedContractEvent<
      FeeCalculatedEvent.InputTuple,
      FeeCalculatedEvent.OutputTuple,
      FeeCalculatedEvent.OutputObject
    >;

    "HealthCheckPerformed(address,bool,string)": TypedContractEvent<
      HealthCheckPerformedEvent.InputTuple,
      HealthCheckPerformedEvent.OutputTuple,
      HealthCheckPerformedEvent.OutputObject
    >;
    HealthCheckPerformed: TypedContractEvent<
      HealthCheckPerformedEvent.InputTuple,
      HealthCheckPerformedEvent.OutputTuple,
      HealthCheckPerformedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProtocolDeregistered(address)": TypedContractEvent<
      ProtocolDeregisteredEvent.InputTuple,
      ProtocolDeregisteredEvent.OutputTuple,
      ProtocolDeregisteredEvent.OutputObject
    >;
    ProtocolDeregistered: TypedContractEvent<
      ProtocolDeregisteredEvent.InputTuple,
      ProtocolDeregisteredEvent.OutputTuple,
      ProtocolDeregisteredEvent.OutputObject
    >;

    "ProtocolRegistered(address,uint8,address)": TypedContractEvent<
      ProtocolRegisteredEvent.InputTuple,
      ProtocolRegisteredEvent.OutputTuple,
      ProtocolRegisteredEvent.OutputObject
    >;
    ProtocolRegistered: TypedContractEvent<
      ProtocolRegisteredEvent.InputTuple,
      ProtocolRegisteredEvent.OutputTuple,
      ProtocolRegisteredEvent.OutputObject
    >;

    "ProtocolUpdated(address,uint8,uint8)": TypedContractEvent<
      ProtocolUpdatedEvent.InputTuple,
      ProtocolUpdatedEvent.OutputTuple,
      ProtocolUpdatedEvent.OutputObject
    >;
    ProtocolUpdated: TypedContractEvent<
      ProtocolUpdatedEvent.InputTuple,
      ProtocolUpdatedEvent.OutputTuple,
      ProtocolUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}

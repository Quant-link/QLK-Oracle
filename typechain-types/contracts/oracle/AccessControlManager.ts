/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccessControlManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACTIVITY_TIMEOUT"
      | "ADMIN_ROLE"
      | "CAN_BLACKLIST_NODES"
      | "CAN_MANAGE_NODES"
      | "CAN_PAUSE_SYSTEM"
      | "CAN_PROCESS_CONSENSUS"
      | "CAN_SUBMIT_DATA"
      | "CAN_UPDATE_CONFIG"
      | "CAN_UPGRADE_CONTRACTS"
      | "CAN_VIEW_SENSITIVE_DATA"
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_RESPONDER_ROLE"
      | "MAX_ROLE_DURATION"
      | "MONITOR_ROLE"
      | "NODE_OPERATOR_ROLE"
      | "ORACLE_ADMIN_ROLE"
      | "SECURITY_OFFICER_ROLE"
      | "SUPER_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "activateEmergencyOverride"
      | "deactivateEmergencyOverride"
      | "delegatePermission"
      | "getRoleAdmin"
      | "grantRole"
      | "grantRoleWithExpiry"
      | "hasPermission"
      | "hasRole"
      | "initialize"
      | "isRoleValid"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "revokeExpiredRoles"
      | "revokeRole"
      | "setTimeBasedAccess"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivityRecorded"
      | "EmergencyOverrideActivated"
      | "EmergencyOverrideDeactivated"
      | "InactiveRoleRevoked"
      | "Initialized"
      | "Paused"
      | "PermissionDelegated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleGrantedWithExpiry"
      | "RoleRevoked"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACTIVITY_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_BLACKLIST_NODES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_MANAGE_NODES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_PAUSE_SYSTEM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_PROCESS_CONSENSUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_SUBMIT_DATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_UPDATE_CONFIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_UPGRADE_CONTRACTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAN_VIEW_SENSITIVE_DATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_RESPONDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROLE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NODE_OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITY_OFFICER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPER_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyOverride",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyOverride",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatePermission",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoleWithExpiry",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoleValid",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeExpiredRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBasedAccess",
    values: [AddressLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACTIVITY_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CAN_BLACKLIST_NODES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_MANAGE_NODES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_PAUSE_SYSTEM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_PROCESS_CONSENSUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_SUBMIT_DATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_UPDATE_CONFIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_UPGRADE_CONTRACTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAN_VIEW_SENSITIVE_DATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_RESPONDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ROLE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NODE_OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITY_OFFICER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPER_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRoleWithExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRoleValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeExpiredRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBasedAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ActivityRecordedEvent {
  export type InputTuple = [account: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [account: string, timestamp: bigint];
  export interface OutputObject {
    account: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyOverrideActivatedEvent {
  export type InputTuple = [account: AddressLike, activator: AddressLike];
  export type OutputTuple = [account: string, activator: string];
  export interface OutputObject {
    account: string;
    activator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyOverrideDeactivatedEvent {
  export type InputTuple = [account: AddressLike, deactivator: AddressLike];
  export type OutputTuple = [account: string, deactivator: string];
  export interface OutputObject {
    account: string;
    deactivator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InactiveRoleRevokedEvent {
  export type InputTuple = [role: BytesLike, account: AddressLike];
  export type OutputTuple = [role: string, account: string];
  export interface OutputObject {
    role: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionDelegatedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    delegatee: AddressLike,
    permission: BytesLike,
    expiryTime: BigNumberish
  ];
  export type OutputTuple = [
    delegator: string,
    delegatee: string,
    permission: string,
    expiryTime: bigint
  ];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
    permission: string;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedWithExpiryEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike,
    expiryTime: BigNumberish
  ];
  export type OutputTuple = [
    role: string,
    account: string,
    sender: string,
    expiryTime: bigint
  ];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessControlManager extends BaseContract {
  connect(runner?: ContractRunner | null): AccessControlManager;
  waitForDeployment(): Promise<this>;

  interface: AccessControlManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACTIVITY_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CAN_BLACKLIST_NODES: TypedContractMethod<[], [string], "view">;

  CAN_MANAGE_NODES: TypedContractMethod<[], [string], "view">;

  CAN_PAUSE_SYSTEM: TypedContractMethod<[], [string], "view">;

  CAN_PROCESS_CONSENSUS: TypedContractMethod<[], [string], "view">;

  CAN_SUBMIT_DATA: TypedContractMethod<[], [string], "view">;

  CAN_UPDATE_CONFIG: TypedContractMethod<[], [string], "view">;

  CAN_UPGRADE_CONTRACTS: TypedContractMethod<[], [string], "view">;

  CAN_VIEW_SENSITIVE_DATA: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGENCY_RESPONDER_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_ROLE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MONITOR_ROLE: TypedContractMethod<[], [string], "view">;

  NODE_OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  ORACLE_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SECURITY_OFFICER_ROLE: TypedContractMethod<[], [string], "view">;

  SUPER_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  activateEmergencyOverride: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  deactivateEmergencyOverride: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  delegatePermission: TypedContractMethod<
    [delegatee: AddressLike, permission: BytesLike, duration: BigNumberish],
    [string],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  grantRoleWithExpiry: TypedContractMethod<
    [role: BytesLike, account: AddressLike, expiryTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasPermission: TypedContractMethod<
    [account: AddressLike, permission: BytesLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [superAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  isRoleValid: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeExpiredRoles: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setTimeBasedAccess: TypedContractMethod<
    [
      account: AddressLike,
      permission: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACTIVITY_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_BLACKLIST_NODES"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_MANAGE_NODES"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_PAUSE_SYSTEM"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_PROCESS_CONSENSUS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_SUBMIT_DATA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_UPDATE_CONFIG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_UPGRADE_CONTRACTS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CAN_VIEW_SENSITIVE_DATA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_RESPONDER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_ROLE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MONITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NODE_OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SECURITY_OFFICER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUPER_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateEmergencyOverride"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateEmergencyOverride"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegatePermission"
  ): TypedContractMethod<
    [delegatee: AddressLike, permission: BytesLike, duration: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRoleWithExpiry"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike, expiryTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasPermission"
  ): TypedContractMethod<
    [account: AddressLike, permission: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[superAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isRoleValid"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeExpiredRoles"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTimeBasedAccess"
  ): TypedContractMethod<
    [
      account: AddressLike,
      permission: BytesLike,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ActivityRecorded"
  ): TypedContractEvent<
    ActivityRecordedEvent.InputTuple,
    ActivityRecordedEvent.OutputTuple,
    ActivityRecordedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyOverrideActivated"
  ): TypedContractEvent<
    EmergencyOverrideActivatedEvent.InputTuple,
    EmergencyOverrideActivatedEvent.OutputTuple,
    EmergencyOverrideActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyOverrideDeactivated"
  ): TypedContractEvent<
    EmergencyOverrideDeactivatedEvent.InputTuple,
    EmergencyOverrideDeactivatedEvent.OutputTuple,
    EmergencyOverrideDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "InactiveRoleRevoked"
  ): TypedContractEvent<
    InactiveRoleRevokedEvent.InputTuple,
    InactiveRoleRevokedEvent.OutputTuple,
    InactiveRoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionDelegated"
  ): TypedContractEvent<
    PermissionDelegatedEvent.InputTuple,
    PermissionDelegatedEvent.OutputTuple,
    PermissionDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGrantedWithExpiry"
  ): TypedContractEvent<
    RoleGrantedWithExpiryEvent.InputTuple,
    RoleGrantedWithExpiryEvent.OutputTuple,
    RoleGrantedWithExpiryEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "ActivityRecorded(address,uint256)": TypedContractEvent<
      ActivityRecordedEvent.InputTuple,
      ActivityRecordedEvent.OutputTuple,
      ActivityRecordedEvent.OutputObject
    >;
    ActivityRecorded: TypedContractEvent<
      ActivityRecordedEvent.InputTuple,
      ActivityRecordedEvent.OutputTuple,
      ActivityRecordedEvent.OutputObject
    >;

    "EmergencyOverrideActivated(address,address)": TypedContractEvent<
      EmergencyOverrideActivatedEvent.InputTuple,
      EmergencyOverrideActivatedEvent.OutputTuple,
      EmergencyOverrideActivatedEvent.OutputObject
    >;
    EmergencyOverrideActivated: TypedContractEvent<
      EmergencyOverrideActivatedEvent.InputTuple,
      EmergencyOverrideActivatedEvent.OutputTuple,
      EmergencyOverrideActivatedEvent.OutputObject
    >;

    "EmergencyOverrideDeactivated(address,address)": TypedContractEvent<
      EmergencyOverrideDeactivatedEvent.InputTuple,
      EmergencyOverrideDeactivatedEvent.OutputTuple,
      EmergencyOverrideDeactivatedEvent.OutputObject
    >;
    EmergencyOverrideDeactivated: TypedContractEvent<
      EmergencyOverrideDeactivatedEvent.InputTuple,
      EmergencyOverrideDeactivatedEvent.OutputTuple,
      EmergencyOverrideDeactivatedEvent.OutputObject
    >;

    "InactiveRoleRevoked(bytes32,address)": TypedContractEvent<
      InactiveRoleRevokedEvent.InputTuple,
      InactiveRoleRevokedEvent.OutputTuple,
      InactiveRoleRevokedEvent.OutputObject
    >;
    InactiveRoleRevoked: TypedContractEvent<
      InactiveRoleRevokedEvent.InputTuple,
      InactiveRoleRevokedEvent.OutputTuple,
      InactiveRoleRevokedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PermissionDelegated(address,address,bytes32,uint256)": TypedContractEvent<
      PermissionDelegatedEvent.InputTuple,
      PermissionDelegatedEvent.OutputTuple,
      PermissionDelegatedEvent.OutputObject
    >;
    PermissionDelegated: TypedContractEvent<
      PermissionDelegatedEvent.InputTuple,
      PermissionDelegatedEvent.OutputTuple,
      PermissionDelegatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleGrantedWithExpiry(bytes32,address,address,uint256)": TypedContractEvent<
      RoleGrantedWithExpiryEvent.InputTuple,
      RoleGrantedWithExpiryEvent.OutputTuple,
      RoleGrantedWithExpiryEvent.OutputObject
    >;
    RoleGrantedWithExpiry: TypedContractEvent<
      RoleGrantedWithExpiryEvent.InputTuple,
      RoleGrantedWithExpiryEvent.OutputTuple,
      RoleGrantedWithExpiryEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPriceFeed {
  export type FeeDataStruct = {
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    roundId: BigNumberish;
    exchangeCount: BigNumberish;
  };

  export type FeeDataStructOutput = [
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    roundId: bigint,
    exchangeCount: bigint
  ] & {
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    roundId: bigint;
    exchangeCount: bigint;
  };

  export type HistoricalQueryStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    maxResults: BigNumberish;
    includeMetadata: boolean;
  };

  export type HistoricalQueryStructOutput = [
    startTime: bigint,
    endTime: bigint,
    maxResults: bigint,
    includeMetadata: boolean
  ] & {
    startTime: bigint;
    endTime: bigint;
    maxResults: bigint;
    includeMetadata: boolean;
  };

  export type PriceDataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    roundId: BigNumberish;
    confidence: BigNumberish;
    source: string;
  };

  export type PriceDataStructOutput = [
    price: bigint,
    timestamp: bigint,
    roundId: bigint,
    confidence: bigint,
    source: string
  ] & {
    price: bigint;
    timestamp: bigint;
    roundId: bigint;
    confidence: bigint;
    source: string;
  };
}

export interface PriceFeedAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DECIMALS"
      | "DEFAULT_ADMIN_ROLE"
      | "DESCRIPTION"
      | "ORACLE_ROLE"
      | "STALENESS_THRESHOLD"
      | "SUBSCRIBER_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "activateEmergencyMode"
      | "addSupportedSource"
      | "deactivateEmergencyMode"
      | "decimals"
      | "description"
      | "getAverageFee"
      | "getContractVersion"
      | "getDataFreshness"
      | "getDataQualityMetrics"
      | "getEmergencyStatus"
      | "getFallbackInfo"
      | "getFeeDataAtRound"
      | "getFeeVolatility"
      | "getHistoricalFeeData"
      | "getHistoricalPriceData"
      | "getLatestFeeData"
      | "getLatestPriceData"
      | "getOracleHealth"
      | "getPriceDataAtRound"
      | "getRoleAdmin"
      | "getRoundData"
      | "getSupportedSources"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "latestRoundData"
      | "oracle"
      | "paused"
      | "proxiableUUID"
      | "removeSupportedSource"
      | "renounceRole"
      | "revokeRole"
      | "setFallbackData"
      | "setOracle"
      | "subscribeToFeeUpdates"
      | "subscribeToPriceUpdates"
      | "supportsInterface"
      | "unsubscribeFromFeeUpdates"
      | "unsubscribeFromPriceUpdates"
      | "updateQualityMetrics"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataSourceAdded"
      | "DataSourceRemoved"
      | "EmergencyModeActivated"
      | "EmergencyModeDeactivated"
      | "FallbackDataActivated"
      | "FeeDataUpdated"
      | "Initialized"
      | "OracleUpdated"
      | "Paused"
      | "PriceUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SubscriptionCreated"
      | "SubscriptionRemoved"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DESCRIPTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STALENESS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIBER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFreshness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataQualityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeVolatility",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalFeeData",
    values: [IPriceFeed.HistoricalQueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getHistoricalPriceData",
    values: [IPriceFeed.HistoricalQueryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFeeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPriceData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackData",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToFeeUpdates",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeToPriceUpdates",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeFromFeeUpdates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeFromPriceUpdates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQualityMetrics",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DESCRIPTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STALENESS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIBER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFreshness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataQualityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHistoricalPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToFeeUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeToPriceUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeFromFeeUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeFromPriceUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQualityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace DataSourceAddedEvent {
  export type InputTuple = [source: string, timestamp: BigNumberish];
  export type OutputTuple = [source: string, timestamp: bigint];
  export interface OutputObject {
    source: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSourceRemovedEvent {
  export type InputTuple = [source: string, timestamp: BigNumberish];
  export type OutputTuple = [source: string, timestamp: bigint];
  export interface OutputObject {
    source: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeActivatedEvent {
  export type InputTuple = [emergencyType: string, timestamp: BigNumberish];
  export type OutputTuple = [emergencyType: string, timestamp: bigint];
  export interface OutputObject {
    emergencyType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyModeDeactivatedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackDataActivatedEvent {
  export type InputTuple = [source: string, timestamp: BigNumberish];
  export type OutputTuple = [source: string, timestamp: bigint];
  export interface OutputObject {
    source: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDataUpdatedEvent {
  export type InputTuple = [
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    roundId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    cexFees: bigint[],
    dexFees: bigint[],
    roundId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    cexFees: bigint[];
    dexFees: bigint[];
    roundId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oldOracle: AddressLike, newOracle: AddressLike];
  export type OutputTuple = [oldOracle: string, newOracle: string];
  export interface OutputObject {
    oldOracle: string;
    newOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    price: BigNumberish,
    roundId: BigNumberish,
    timestamp: BigNumberish,
    confidence: BigNumberish
  ];
  export type OutputTuple = [
    price: bigint,
    roundId: bigint,
    timestamp: bigint,
    confidence: bigint
  ];
  export interface OutputObject {
    price: bigint;
    roundId: bigint;
    timestamp: bigint;
    confidence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subscriber: AddressLike, subscriptionType: string];
  export type OutputTuple = [subscriber: string, subscriptionType: string];
  export interface OutputObject {
    subscriber: string;
    subscriptionType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionRemovedEvent {
  export type InputTuple = [subscriber: AddressLike, subscriptionType: string];
  export type OutputTuple = [subscriber: string, subscriptionType: string];
  export interface OutputObject {
    subscriber: string;
    subscriptionType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceFeedAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): PriceFeedAdapter;
  waitForDeployment(): Promise<this>;

  interface: PriceFeedAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DECIMALS: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DESCRIPTION: TypedContractMethod<[], [string], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  STALENESS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  SUBSCRIBER_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  activateEmergencyMode: TypedContractMethod<
    [emergencyType: string],
    [void],
    "nonpayable"
  >;

  addSupportedSource: TypedContractMethod<
    [source: string],
    [void],
    "nonpayable"
  >;

  deactivateEmergencyMode: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  getAverageFee: TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { averageFee: bigint; sampleCount: bigint }],
    "view"
  >;

  getContractVersion: TypedContractMethod<[], [string], "view">;

  getDataFreshness: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isFresh: boolean;
        lastUpdateTime: bigint;
        stalenessThreshold: bigint;
      }
    ],
    "view"
  >;

  getDataQualityMetrics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        accuracy: bigint;
        precision: bigint;
        reliability: bigint;
        coverage: bigint;
      }
    ],
    "view"
  >;

  getEmergencyStatus: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        isEmergency: boolean;
        emergencyType: string;
        emergencyStartTime: bigint;
      }
    ],
    "view"
  >;

  getFallbackInfo: TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        hasFallback: boolean;
        fallbackSource: string;
        fallbackTimestamp: bigint;
      }
    ],
    "view"
  >;

  getFeeDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;

  getFeeVolatility: TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { volatility: bigint; confidence: bigint }],
    "view"
  >;

  getHistoricalFeeData: TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.FeeDataStructOutput[]],
    "view"
  >;

  getHistoricalPriceData: TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.PriceDataStructOutput[]],
    "view"
  >;

  getLatestFeeData: TypedContractMethod<
    [],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;

  getLatestPriceData: TypedContractMethod<
    [],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;

  getOracleHealth: TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint] & {
        isHealthy: boolean;
        consensusReached: boolean;
        activeNodes: bigint;
        lastConsensusTime: bigint;
      }
    ],
    "view"
  >;

  getPriceDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  getSupportedSources: TypedContractMethod<[], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [admin: AddressLike, _oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  latestRoundData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeSupportedSource: TypedContractMethod<
    [source: string],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFallbackData: TypedContractMethod<
    [source: string, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  subscribeToFeeUpdates: TypedContractMethod<
    [
      subscriber: AddressLike,
      feeThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  subscribeToPriceUpdates: TypedContractMethod<
    [
      subscriber: AddressLike,
      priceThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unsubscribeFromFeeUpdates: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  unsubscribeFromPriceUpdates: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  updateQualityMetrics: TypedContractMethod<
    [
      accuracy: BigNumberish,
      precision: BigNumberish,
      reliability: BigNumberish,
      coverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DESCRIPTION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STALENESS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUBSCRIBER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activateEmergencyMode"
  ): TypedContractMethod<[emergencyType: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedSource"
  ): TypedContractMethod<[source: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deactivateEmergencyMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAverageFee"
  ): TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { averageFee: bigint; sampleCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataFreshness"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint] & {
        isFresh: boolean;
        lastUpdateTime: bigint;
        stalenessThreshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataQualityMetrics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        accuracy: bigint;
        precision: bigint;
        reliability: bigint;
        coverage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmergencyStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        isEmergency: boolean;
        emergencyType: string;
        emergencyStartTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFallbackInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, string, bigint] & {
        hasFallback: boolean;
        fallbackSource: string;
        fallbackTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.FeeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeVolatility"
  ): TypedContractMethod<
    [timeWindow: BigNumberish, feeType: BigNumberish],
    [[bigint, bigint] & { volatility: bigint; confidence: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoricalFeeData"
  ): TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.FeeDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHistoricalPriceData"
  ): TypedContractMethod<
    [query: IPriceFeed.HistoricalQueryStruct],
    [IPriceFeed.PriceDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestFeeData"
  ): TypedContractMethod<[], [IPriceFeed.FeeDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLatestPriceData"
  ): TypedContractMethod<[], [IPriceFeed.PriceDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getOracleHealth"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint] & {
        isHealthy: boolean;
        consensusReached: boolean;
        activeNodes: bigint;
        lastConsensusTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IPriceFeed.PriceDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundData"
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedSources"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [admin: AddressLike, _oracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestRoundData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSupportedSource"
  ): TypedContractMethod<[source: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFallbackData"
  ): TypedContractMethod<
    [source: string, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscribeToFeeUpdates"
  ): TypedContractMethod<
    [
      subscriber: AddressLike,
      feeThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribeToPriceUpdates"
  ): TypedContractMethod<
    [
      subscriber: AddressLike,
      priceThreshold: BigNumberish,
      timeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unsubscribeFromFeeUpdates"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unsubscribeFromPriceUpdates"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateQualityMetrics"
  ): TypedContractMethod<
    [
      accuracy: BigNumberish,
      precision: BigNumberish,
      reliability: BigNumberish,
      coverage: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DataSourceAdded"
  ): TypedContractEvent<
    DataSourceAddedEvent.InputTuple,
    DataSourceAddedEvent.OutputTuple,
    DataSourceAddedEvent.OutputObject
  >;
  getEvent(
    key: "DataSourceRemoved"
  ): TypedContractEvent<
    DataSourceRemovedEvent.InputTuple,
    DataSourceRemovedEvent.OutputTuple,
    DataSourceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeActivated"
  ): TypedContractEvent<
    EmergencyModeActivatedEvent.InputTuple,
    EmergencyModeActivatedEvent.OutputTuple,
    EmergencyModeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyModeDeactivated"
  ): TypedContractEvent<
    EmergencyModeDeactivatedEvent.InputTuple,
    EmergencyModeDeactivatedEvent.OutputTuple,
    EmergencyModeDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "FallbackDataActivated"
  ): TypedContractEvent<
    FallbackDataActivatedEvent.InputTuple,
    FallbackDataActivatedEvent.OutputTuple,
    FallbackDataActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeDataUpdated"
  ): TypedContractEvent<
    FeeDataUpdatedEvent.InputTuple,
    FeeDataUpdatedEvent.OutputTuple,
    FeeDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionRemoved"
  ): TypedContractEvent<
    SubscriptionRemovedEvent.InputTuple,
    SubscriptionRemovedEvent.OutputTuple,
    SubscriptionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "DataSourceAdded(string,uint256)": TypedContractEvent<
      DataSourceAddedEvent.InputTuple,
      DataSourceAddedEvent.OutputTuple,
      DataSourceAddedEvent.OutputObject
    >;
    DataSourceAdded: TypedContractEvent<
      DataSourceAddedEvent.InputTuple,
      DataSourceAddedEvent.OutputTuple,
      DataSourceAddedEvent.OutputObject
    >;

    "DataSourceRemoved(string,uint256)": TypedContractEvent<
      DataSourceRemovedEvent.InputTuple,
      DataSourceRemovedEvent.OutputTuple,
      DataSourceRemovedEvent.OutputObject
    >;
    DataSourceRemoved: TypedContractEvent<
      DataSourceRemovedEvent.InputTuple,
      DataSourceRemovedEvent.OutputTuple,
      DataSourceRemovedEvent.OutputObject
    >;

    "EmergencyModeActivated(string,uint256)": TypedContractEvent<
      EmergencyModeActivatedEvent.InputTuple,
      EmergencyModeActivatedEvent.OutputTuple,
      EmergencyModeActivatedEvent.OutputObject
    >;
    EmergencyModeActivated: TypedContractEvent<
      EmergencyModeActivatedEvent.InputTuple,
      EmergencyModeActivatedEvent.OutputTuple,
      EmergencyModeActivatedEvent.OutputObject
    >;

    "EmergencyModeDeactivated(uint256)": TypedContractEvent<
      EmergencyModeDeactivatedEvent.InputTuple,
      EmergencyModeDeactivatedEvent.OutputTuple,
      EmergencyModeDeactivatedEvent.OutputObject
    >;
    EmergencyModeDeactivated: TypedContractEvent<
      EmergencyModeDeactivatedEvent.InputTuple,
      EmergencyModeDeactivatedEvent.OutputTuple,
      EmergencyModeDeactivatedEvent.OutputObject
    >;

    "FallbackDataActivated(string,uint256)": TypedContractEvent<
      FallbackDataActivatedEvent.InputTuple,
      FallbackDataActivatedEvent.OutputTuple,
      FallbackDataActivatedEvent.OutputObject
    >;
    FallbackDataActivated: TypedContractEvent<
      FallbackDataActivatedEvent.InputTuple,
      FallbackDataActivatedEvent.OutputTuple,
      FallbackDataActivatedEvent.OutputObject
    >;

    "FeeDataUpdated(uint256[],uint256[],uint80,uint256)": TypedContractEvent<
      FeeDataUpdatedEvent.InputTuple,
      FeeDataUpdatedEvent.OutputTuple,
      FeeDataUpdatedEvent.OutputObject
    >;
    FeeDataUpdated: TypedContractEvent<
      FeeDataUpdatedEvent.InputTuple,
      FeeDataUpdatedEvent.OutputTuple,
      FeeDataUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OracleUpdated(address,address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PriceUpdated(int256,uint80,uint256,uint8)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SubscriptionCreated(address,string)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionRemoved(address,string)": TypedContractEvent<
      SubscriptionRemovedEvent.InputTuple,
      SubscriptionRemovedEvent.OutputTuple,
      SubscriptionRemovedEvent.OutputObject
    >;
    SubscriptionRemoved: TypedContractEvent<
      SubscriptionRemovedEvent.InputTuple,
      SubscriptionRemovedEvent.OutputTuple,
      SubscriptionRemovedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IQuantlinkOracle {
  export type FeeDataStruct = {
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
    consensusReached: boolean;
    participatingNodes: BigNumberish;
  };

  export type FeeDataStructOutput = [
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    blockNumber: bigint,
    consensusReached: boolean,
    participatingNodes: bigint
  ] & {
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    blockNumber: bigint;
    consensusReached: boolean;
    participatingNodes: bigint;
  };

  export type ConsensusRoundStruct = {
    roundId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    submissionsCount: BigNumberish;
    consensusReached: boolean;
    finalData: IQuantlinkOracle.FeeDataStruct;
  };

  export type ConsensusRoundStructOutput = [
    roundId: bigint,
    startTime: bigint,
    endTime: bigint,
    submissionsCount: bigint,
    consensusReached: boolean,
    finalData: IQuantlinkOracle.FeeDataStructOutput
  ] & {
    roundId: bigint;
    startTime: bigint;
    endTime: bigint;
    submissionsCount: bigint;
    consensusReached: boolean;
    finalData: IQuantlinkOracle.FeeDataStructOutput;
  };

  export type DataSubmissionStruct = {
    nodeAddress: AddressLike;
    cexFees: BigNumberish[];
    dexFees: BigNumberish[];
    timestamp: BigNumberish;
    signature: BytesLike;
  };

  export type DataSubmissionStructOutput = [
    nodeAddress: string,
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint,
    signature: string
  ] & {
    nodeAddress: string;
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
    signature: string;
  };
}

export interface QuantlinkOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CONSENSUS_ROLE"
      | "CONSENSUS_WINDOW"
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_CONSENSUS_THRESHOLD"
      | "EMERGENCY_ROLE"
      | "NODE_MANAGER_ROLE"
      | "SUBMISSION_WINDOW"
      | "TOTAL_NODES"
      | "UPDATE_INTERVAL"
      | "UPGRADE_INTERFACE_VERSION"
      | "addNode"
      | "consensusEngine"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getConsensusThreshold"
      | "getCurrentRound"
      | "getCurrentRoundId"
      | "getCurrentSubmitter"
      | "getFeeDataAtRound"
      | "getLastUpdateTime"
      | "getLatestFeeData"
      | "getNextRotationTime"
      | "getNodeNonce"
      | "getRoleAdmin"
      | "getRoundSubmitters"
      | "getSubmission"
      | "getTotalNodes"
      | "getUpdateInterval"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isConsensusWindowOpen"
      | "isNodeActive"
      | "isSubmissionWindowOpen"
      | "nodeManager"
      | "paused"
      | "processConsensus"
      | "proxiableUUID"
      | "removeNode"
      | "renounceRole"
      | "revokeRole"
      | "rotateSubmitter"
      | "setConsensusEngine"
      | "setNodeManager"
      | "submitData"
      | "supportsInterface"
      | "updateConsensusThreshold"
      | "updateUpdateInterval"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfigurationUpdated"
      | "ConsensusFailed"
      | "ConsensusReached"
      | "ConsensusRoundEnded"
      | "ConsensusRoundStarted"
      | "DataSubmitted"
      | "DataValidationFailed"
      | "EmergencyPaused"
      | "EmergencyUnpaused"
      | "Initialized"
      | "NodeRotated"
      | "OracleInitialized"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RoundTimeout"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSENSUS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSENSUS_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CONSENSUS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NODE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_NODES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consensusEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDataAtRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestFeeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextRotationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundSubmitters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isConsensusWindowOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionWindowOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConsensusEngine",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitData",
    values: [BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsensusThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUpdateInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONSENSUS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSENSUS_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CONSENSUS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NODE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_NODES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consensusEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDataAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestFeeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextRotationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundSubmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConsensusWindowOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionWindowOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsensusEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsensusThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUpdateInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ConfigurationUpdatedEvent {
  export type InputTuple = [
    parameter: string,
    oldValue: BigNumberish,
    newValue: BigNumberish,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    parameter: string,
    oldValue: bigint,
    newValue: bigint,
    updatedBy: string
  ];
  export interface OutputObject {
    parameter: string;
    oldValue: bigint;
    newValue: bigint;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusFailedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    submissionsReceived: BigNumberish,
    requiredSubmissions: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    roundId: bigint,
    submissionsReceived: bigint,
    requiredSubmissions: bigint,
    reason: string
  ];
  export interface OutputObject {
    roundId: bigint;
    submissionsReceived: bigint;
    requiredSubmissions: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusReachedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    participatingNodes: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    cexFees: bigint[],
    dexFees: bigint[],
    participatingNodes: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    cexFees: bigint[];
    dexFees: bigint[];
    participatingNodes: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusRoundEndedEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    endTime: BigNumberish,
    consensusReached: boolean
  ];
  export type OutputTuple = [
    roundId: bigint,
    endTime: bigint,
    consensusReached: boolean
  ];
  export interface OutputObject {
    roundId: bigint;
    endTime: bigint;
    consensusReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusRoundStartedEvent {
  export type InputTuple = [roundId: BigNumberish, startTime: BigNumberish];
  export type OutputTuple = [roundId: bigint, startTime: bigint];
  export interface OutputObject {
    roundId: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSubmittedEvent {
  export type InputTuple = [
    node: AddressLike,
    roundId: BigNumberish,
    cexFees: BigNumberish[],
    dexFees: BigNumberish[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    roundId: bigint,
    cexFees: bigint[],
    dexFees: bigint[],
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    roundId: bigint;
    cexFees: bigint[];
    dexFees: bigint[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataValidationFailedEvent {
  export type InputTuple = [
    node: AddressLike,
    roundId: BigNumberish,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    roundId: bigint,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    roundId: bigint;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPausedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyUnpausedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRotatedEvent {
  export type InputTuple = [
    oldSubmitter: AddressLike,
    newSubmitter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldSubmitter: string,
    newSubmitter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldSubmitter: string;
    newSubmitter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleInitializedEvent {
  export type InputTuple = [
    admin: AddressLike,
    nodeManager: AddressLike,
    consensusEngine: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    admin: string,
    nodeManager: string,
    consensusEngine: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    admin: string;
    nodeManager: string;
    consensusEngine: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundTimeoutEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    submissionsReceived: BigNumberish,
    requiredSubmissions: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    submissionsReceived: bigint,
    requiredSubmissions: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    submissionsReceived: bigint;
    requiredSubmissions: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface QuantlinkOracle extends BaseContract {
  connect(runner?: ContractRunner | null): QuantlinkOracle;
  waitForDeployment(): Promise<this>;

  interface: QuantlinkOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CONSENSUS_ROLE: TypedContractMethod<[], [string], "view">;

  CONSENSUS_WINDOW: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_CONSENSUS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  NODE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  SUBMISSION_WINDOW: TypedContractMethod<[], [bigint], "view">;

  TOTAL_NODES: TypedContractMethod<[], [bigint], "view">;

  UPDATE_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  consensusEngine: TypedContractMethod<[], [string], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getConsensusThreshold: TypedContractMethod<[], [bigint], "view">;

  getCurrentRound: TypedContractMethod<
    [],
    [IQuantlinkOracle.ConsensusRoundStructOutput],
    "view"
  >;

  getCurrentRoundId: TypedContractMethod<[], [bigint], "view">;

  getCurrentSubmitter: TypedContractMethod<[], [string], "view">;

  getFeeDataAtRound: TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;

  getLastUpdateTime: TypedContractMethod<[], [bigint], "view">;

  getLatestFeeData: TypedContractMethod<
    [],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;

  getNextRotationTime: TypedContractMethod<[], [bigint], "view">;

  getNodeNonce: TypedContractMethod<[node: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoundSubmitters: TypedContractMethod<
    [roundId: BigNumberish],
    [string[]],
    "view"
  >;

  getSubmission: TypedContractMethod<
    [roundId: BigNumberish, node: AddressLike],
    [IQuantlinkOracle.DataSubmissionStructOutput],
    "view"
  >;

  getTotalNodes: TypedContractMethod<[], [bigint], "view">;

  getUpdateInterval: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      admin: AddressLike,
      _nodeManager: AddressLike,
      _consensusEngine: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isConsensusWindowOpen: TypedContractMethod<[], [boolean], "view">;

  isNodeActive: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isSubmissionWindowOpen: TypedContractMethod<[], [boolean], "view">;

  nodeManager: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processConsensus: TypedContractMethod<[], [void], "nonpayable">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rotateSubmitter: TypedContractMethod<[], [void], "nonpayable">;

  setConsensusEngine: TypedContractMethod<
    [newConsensusEngine: AddressLike],
    [void],
    "nonpayable"
  >;

  setNodeManager: TypedContractMethod<
    [newNodeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  submitData: TypedContractMethod<
    [cexFees: BigNumberish[], dexFees: BigNumberish[], signature: BytesLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateConsensusThreshold: TypedContractMethod<
    [newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateUpdateInterval: TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSENSUS_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONSENSUS_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_CONSENSUS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NODE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SUBMISSION_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_NODES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPDATE_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "consensusEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConsensusThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRound"
  ): TypedContractMethod<
    [],
    [IQuantlinkOracle.ConsensusRoundStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeDataAtRound"
  ): TypedContractMethod<
    [roundId: BigNumberish],
    [IQuantlinkOracle.FeeDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastUpdateTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLatestFeeData"
  ): TypedContractMethod<[], [IQuantlinkOracle.FeeDataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getNextRotationTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNodeNonce"
  ): TypedContractMethod<[node: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoundSubmitters"
  ): TypedContractMethod<[roundId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [roundId: BigNumberish, node: AddressLike],
    [IQuantlinkOracle.DataSubmissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUpdateInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      admin: AddressLike,
      _nodeManager: AddressLike,
      _consensusEngine: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isConsensusWindowOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNodeActive"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSubmissionWindowOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "nodeManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processConsensus"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rotateSubmitter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setConsensusEngine"
  ): TypedContractMethod<
    [newConsensusEngine: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNodeManager"
  ): TypedContractMethod<[newNodeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitData"
  ): TypedContractMethod<
    [cexFees: BigNumberish[], dexFees: BigNumberish[], signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateConsensusThreshold"
  ): TypedContractMethod<[newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUpdateInterval"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ConfigurationUpdated"
  ): TypedContractEvent<
    ConfigurationUpdatedEvent.InputTuple,
    ConfigurationUpdatedEvent.OutputTuple,
    ConfigurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusFailed"
  ): TypedContractEvent<
    ConsensusFailedEvent.InputTuple,
    ConsensusFailedEvent.OutputTuple,
    ConsensusFailedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusReached"
  ): TypedContractEvent<
    ConsensusReachedEvent.InputTuple,
    ConsensusReachedEvent.OutputTuple,
    ConsensusReachedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusRoundEnded"
  ): TypedContractEvent<
    ConsensusRoundEndedEvent.InputTuple,
    ConsensusRoundEndedEvent.OutputTuple,
    ConsensusRoundEndedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusRoundStarted"
  ): TypedContractEvent<
    ConsensusRoundStartedEvent.InputTuple,
    ConsensusRoundStartedEvent.OutputTuple,
    ConsensusRoundStartedEvent.OutputObject
  >;
  getEvent(
    key: "DataSubmitted"
  ): TypedContractEvent<
    DataSubmittedEvent.InputTuple,
    DataSubmittedEvent.OutputTuple,
    DataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "DataValidationFailed"
  ): TypedContractEvent<
    DataValidationFailedEvent.InputTuple,
    DataValidationFailedEvent.OutputTuple,
    DataValidationFailedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPaused"
  ): TypedContractEvent<
    EmergencyPausedEvent.InputTuple,
    EmergencyPausedEvent.OutputTuple,
    EmergencyPausedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyUnpaused"
  ): TypedContractEvent<
    EmergencyUnpausedEvent.InputTuple,
    EmergencyUnpausedEvent.OutputTuple,
    EmergencyUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRotated"
  ): TypedContractEvent<
    NodeRotatedEvent.InputTuple,
    NodeRotatedEvent.OutputTuple,
    NodeRotatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleInitialized"
  ): TypedContractEvent<
    OracleInitializedEvent.InputTuple,
    OracleInitializedEvent.OutputTuple,
    OracleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoundTimeout"
  ): TypedContractEvent<
    RoundTimeoutEvent.InputTuple,
    RoundTimeoutEvent.OutputTuple,
    RoundTimeoutEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "ConfigurationUpdated(string,uint256,uint256,address)": TypedContractEvent<
      ConfigurationUpdatedEvent.InputTuple,
      ConfigurationUpdatedEvent.OutputTuple,
      ConfigurationUpdatedEvent.OutputObject
    >;
    ConfigurationUpdated: TypedContractEvent<
      ConfigurationUpdatedEvent.InputTuple,
      ConfigurationUpdatedEvent.OutputTuple,
      ConfigurationUpdatedEvent.OutputObject
    >;

    "ConsensusFailed(uint256,uint8,uint8,string)": TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;
    ConsensusFailed: TypedContractEvent<
      ConsensusFailedEvent.InputTuple,
      ConsensusFailedEvent.OutputTuple,
      ConsensusFailedEvent.OutputObject
    >;

    "ConsensusReached(uint256,uint256[],uint256[],uint8,uint256)": TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;
    ConsensusReached: TypedContractEvent<
      ConsensusReachedEvent.InputTuple,
      ConsensusReachedEvent.OutputTuple,
      ConsensusReachedEvent.OutputObject
    >;

    "ConsensusRoundEnded(uint256,uint256,bool)": TypedContractEvent<
      ConsensusRoundEndedEvent.InputTuple,
      ConsensusRoundEndedEvent.OutputTuple,
      ConsensusRoundEndedEvent.OutputObject
    >;
    ConsensusRoundEnded: TypedContractEvent<
      ConsensusRoundEndedEvent.InputTuple,
      ConsensusRoundEndedEvent.OutputTuple,
      ConsensusRoundEndedEvent.OutputObject
    >;

    "ConsensusRoundStarted(uint256,uint256)": TypedContractEvent<
      ConsensusRoundStartedEvent.InputTuple,
      ConsensusRoundStartedEvent.OutputTuple,
      ConsensusRoundStartedEvent.OutputObject
    >;
    ConsensusRoundStarted: TypedContractEvent<
      ConsensusRoundStartedEvent.InputTuple,
      ConsensusRoundStartedEvent.OutputTuple,
      ConsensusRoundStartedEvent.OutputObject
    >;

    "DataSubmitted(address,uint256,uint256[],uint256[],uint256)": TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;
    DataSubmitted: TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;

    "DataValidationFailed(address,uint256,string,uint256)": TypedContractEvent<
      DataValidationFailedEvent.InputTuple,
      DataValidationFailedEvent.OutputTuple,
      DataValidationFailedEvent.OutputObject
    >;
    DataValidationFailed: TypedContractEvent<
      DataValidationFailedEvent.InputTuple,
      DataValidationFailedEvent.OutputTuple,
      DataValidationFailedEvent.OutputObject
    >;

    "EmergencyPaused(address,uint256)": TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;
    EmergencyPaused: TypedContractEvent<
      EmergencyPausedEvent.InputTuple,
      EmergencyPausedEvent.OutputTuple,
      EmergencyPausedEvent.OutputObject
    >;

    "EmergencyUnpaused(address,uint256)": TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;
    EmergencyUnpaused: TypedContractEvent<
      EmergencyUnpausedEvent.InputTuple,
      EmergencyUnpausedEvent.OutputTuple,
      EmergencyUnpausedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NodeRotated(address,address,uint256)": TypedContractEvent<
      NodeRotatedEvent.InputTuple,
      NodeRotatedEvent.OutputTuple,
      NodeRotatedEvent.OutputObject
    >;
    NodeRotated: TypedContractEvent<
      NodeRotatedEvent.InputTuple,
      NodeRotatedEvent.OutputTuple,
      NodeRotatedEvent.OutputObject
    >;

    "OracleInitialized(address,address,address,uint256)": TypedContractEvent<
      OracleInitializedEvent.InputTuple,
      OracleInitializedEvent.OutputTuple,
      OracleInitializedEvent.OutputObject
    >;
    OracleInitialized: TypedContractEvent<
      OracleInitializedEvent.InputTuple,
      OracleInitializedEvent.OutputTuple,
      OracleInitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RoundTimeout(uint256,uint8,uint8,uint256)": TypedContractEvent<
      RoundTimeoutEvent.InputTuple,
      RoundTimeoutEvent.OutputTuple,
      RoundTimeoutEvent.OutputObject
    >;
    RoundTimeout: TypedContractEvent<
      RoundTimeoutEvent.InputTuple,
      RoundTimeoutEvent.OutputTuple,
      RoundTimeoutEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

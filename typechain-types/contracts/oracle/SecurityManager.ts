/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SecurityManager {
  export type NodeSecurityProfileStruct = {
    submissionCount: BigNumberish;
    failedAttempts: BigNumberish;
    lastSubmissionTime: BigNumberish;
    lockoutUntil: BigNumberish;
    reputationScore: BigNumberish;
    anomalyCount: BigNumberish;
    isBlacklisted: boolean;
    submissionHashes: BytesLike[];
  };

  export type NodeSecurityProfileStructOutput = [
    submissionCount: bigint,
    failedAttempts: bigint,
    lastSubmissionTime: bigint,
    lockoutUntil: bigint,
    reputationScore: bigint,
    anomalyCount: bigint,
    isBlacklisted: boolean,
    submissionHashes: string[]
  ] & {
    submissionCount: bigint;
    failedAttempts: bigint;
    lastSubmissionTime: bigint;
    lockoutUntil: bigint;
    reputationScore: bigint;
    anomalyCount: bigint;
    isBlacklisted: boolean;
    submissionHashes: string[];
  };

  export type ThreatAlertStruct = {
    source: AddressLike;
    threatType: string;
    severity: BigNumberish;
    timestamp: BigNumberish;
    description: string;
    resolved: boolean;
  };

  export type ThreatAlertStructOutput = [
    source: string,
    threatType: string,
    severity: bigint,
    timestamp: bigint,
    description: string,
    resolved: boolean
  ] & {
    source: string;
    threatType: string;
    severity: bigint;
    timestamp: bigint;
    description: string;
    resolved: boolean;
  };

  export type SecurityMetricsStruct = {
    totalSubmissions: BigNumberish;
    failedSubmissions: BigNumberish;
    suspiciousActivity: BigNumberish;
    lastAnomalyTime: BigNumberish;
    threatLevel: BigNumberish;
    isUnderAttack: boolean;
  };

  export type SecurityMetricsStructOutput = [
    totalSubmissions: bigint,
    failedSubmissions: bigint,
    suspiciousActivity: bigint,
    lastAnomalyTime: bigint,
    threatLevel: bigint,
    isUnderAttack: boolean
  ] & {
    totalSubmissions: bigint;
    failedSubmissions: bigint;
    suspiciousActivity: bigint;
    lastAnomalyTime: bigint;
    threatLevel: bigint;
    isUnderAttack: boolean;
  };
}

export interface SecurityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "ANOMALY_THRESHOLD"
      | "DEFAULT_ADMIN_ROLE"
      | "EMERGENCY_ROLE"
      | "LOCKOUT_DURATION"
      | "MAX_FAILED_ATTEMPTS"
      | "MAX_SUBMISSIONS_PER_HOUR"
      | "MONITOR_ROLE"
      | "REPUTATION_DECAY_RATE"
      | "SECURITY_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "blacklistNode"
      | "clearOldThreatAlerts"
      | "emergencyReset"
      | "getBlacklistedAddresses"
      | "getNodeReputation"
      | "getNodeSecurityProfile"
      | "getRecentThreatAlerts"
      | "getRoleAdmin"
      | "getSecurityMetrics"
      | "getThreatAlerts"
      | "getThreatLevel"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isBlacklisted"
      | "isUnderAttack"
      | "paused"
      | "proxiableUUID"
      | "renounceRole"
      | "resolveThreatAlert"
      | "revokeRole"
      | "setThreatLevel"
      | "supportsInterface"
      | "updateNodeReputation"
      | "upgradeToAndCall"
      | "validateSubmission"
      | "version"
      | "whitelistNode"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnomalyDetected"
      | "EmergencyLockdown"
      | "Initialized"
      | "NodeBlacklisted"
      | "NodeWhitelisted"
      | "Paused"
      | "RateLimitExceeded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SecurityLevelChanged"
      | "ThreatDetected"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANOMALY_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCKOUT_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FAILED_ATTEMPTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUBMISSIONS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_DECAY_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistNode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearOldThreatAlerts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlacklistedAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeSecurityProfile",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentThreatAlerts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreatAlerts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreatLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnderAttack",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveThreatAlert",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreatLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSubmission",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistNode",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ANOMALY_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCKOUT_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FAILED_ATTEMPTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SUBMISSIONS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_DECAY_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearOldThreatAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlacklistedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeSecurityProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentThreatAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreatAlerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreatLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnderAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveThreatAlert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThreatLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistNode",
    data: BytesLike
  ): Result;
}

export namespace AnomalyDetectedEvent {
  export type InputTuple = [
    node: AddressLike,
    anomalyType: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    anomalyType: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    anomalyType: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyLockdownEvent {
  export type InputTuple = [
    initiator: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    initiator: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    initiator: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeBlacklistedEvent {
  export type InputTuple = [
    node: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeWhitelistedEvent {
  export type InputTuple = [node: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [node: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RateLimitExceededEvent {
  export type InputTuple = [
    node: AddressLike,
    attempts: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, attempts: bigint, timestamp: bigint];
  export interface OutputObject {
    node: string;
    attempts: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityLevelChangedEvent {
  export type InputTuple = [
    oldLevel: BigNumberish,
    newLevel: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldLevel: bigint,
    newLevel: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldLevel: bigint;
    newLevel: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThreatDetectedEvent {
  export type InputTuple = [
    source: AddressLike,
    threatType: string,
    severity: BigNumberish,
    description: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    source: string,
    threatType: string,
    severity: bigint,
    description: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    source: string;
    threatType: string;
    severity: bigint;
    description: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecurityManager extends BaseContract {
  connect(runner?: ContractRunner | null): SecurityManager;
  waitForDeployment(): Promise<this>;

  interface: SecurityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ANOMALY_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  LOCKOUT_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_FAILED_ATTEMPTS: TypedContractMethod<[], [bigint], "view">;

  MAX_SUBMISSIONS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  MONITOR_ROLE: TypedContractMethod<[], [string], "view">;

  REPUTATION_DECAY_RATE: TypedContractMethod<[], [bigint], "view">;

  SECURITY_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  blacklistNode: TypedContractMethod<
    [node: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  clearOldThreatAlerts: TypedContractMethod<
    [olderThanDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyReset: TypedContractMethod<[], [void], "nonpayable">;

  getBlacklistedAddresses: TypedContractMethod<[], [string[]], "view">;

  getNodeReputation: TypedContractMethod<[node: AddressLike], [bigint], "view">;

  getNodeSecurityProfile: TypedContractMethod<
    [node: AddressLike],
    [SecurityManager.NodeSecurityProfileStructOutput],
    "view"
  >;

  getRecentThreatAlerts: TypedContractMethod<
    [],
    [SecurityManager.ThreatAlertStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSecurityMetrics: TypedContractMethod<
    [],
    [SecurityManager.SecurityMetricsStructOutput],
    "view"
  >;

  getThreatAlerts: TypedContractMethod<
    [],
    [SecurityManager.ThreatAlertStructOutput[]],
    "view"
  >;

  getThreatLevel: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  isBlacklisted: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isUnderAttack: TypedContractMethod<[], [boolean], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  resolveThreatAlert: TypedContractMethod<
    [alertIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setThreatLevel: TypedContractMethod<
    [level: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateNodeReputation: TypedContractMethod<
    [node: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  validateSubmission: TypedContractMethod<
    [node: AddressLike, dataHash: BytesLike, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  whitelistNode: TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ANOMALY_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LOCKOUT_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FAILED_ATTEMPTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUBMISSIONS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MONITOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_DECAY_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blacklistNode"
  ): TypedContractMethod<
    [node: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearOldThreatAlerts"
  ): TypedContractMethod<[olderThanDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyReset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBlacklistedAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNodeReputation"
  ): TypedContractMethod<[node: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNodeSecurityProfile"
  ): TypedContractMethod<
    [node: AddressLike],
    [SecurityManager.NodeSecurityProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentThreatAlerts"
  ): TypedContractMethod<
    [],
    [SecurityManager.ThreatAlertStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSecurityMetrics"
  ): TypedContractMethod<
    [],
    [SecurityManager.SecurityMetricsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreatAlerts"
  ): TypedContractMethod<
    [],
    [SecurityManager.ThreatAlertStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getThreatLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUnderAttack"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveThreatAlert"
  ): TypedContractMethod<[alertIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThreatLevel"
  ): TypedContractMethod<[level: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateNodeReputation"
  ): TypedContractMethod<
    [node: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validateSubmission"
  ): TypedContractMethod<
    [node: AddressLike, dataHash: BytesLike, signature: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "whitelistNode"
  ): TypedContractMethod<[node: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AnomalyDetected"
  ): TypedContractEvent<
    AnomalyDetectedEvent.InputTuple,
    AnomalyDetectedEvent.OutputTuple,
    AnomalyDetectedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyLockdown"
  ): TypedContractEvent<
    EmergencyLockdownEvent.InputTuple,
    EmergencyLockdownEvent.OutputTuple,
    EmergencyLockdownEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NodeBlacklisted"
  ): TypedContractEvent<
    NodeBlacklistedEvent.InputTuple,
    NodeBlacklistedEvent.OutputTuple,
    NodeBlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "NodeWhitelisted"
  ): TypedContractEvent<
    NodeWhitelistedEvent.InputTuple,
    NodeWhitelistedEvent.OutputTuple,
    NodeWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RateLimitExceeded"
  ): TypedContractEvent<
    RateLimitExceededEvent.InputTuple,
    RateLimitExceededEvent.OutputTuple,
    RateLimitExceededEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SecurityLevelChanged"
  ): TypedContractEvent<
    SecurityLevelChangedEvent.InputTuple,
    SecurityLevelChangedEvent.OutputTuple,
    SecurityLevelChangedEvent.OutputObject
  >;
  getEvent(
    key: "ThreatDetected"
  ): TypedContractEvent<
    ThreatDetectedEvent.InputTuple,
    ThreatDetectedEvent.OutputTuple,
    ThreatDetectedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AnomalyDetected(address,string,uint256)": TypedContractEvent<
      AnomalyDetectedEvent.InputTuple,
      AnomalyDetectedEvent.OutputTuple,
      AnomalyDetectedEvent.OutputObject
    >;
    AnomalyDetected: TypedContractEvent<
      AnomalyDetectedEvent.InputTuple,
      AnomalyDetectedEvent.OutputTuple,
      AnomalyDetectedEvent.OutputObject
    >;

    "EmergencyLockdown(address,string,uint256)": TypedContractEvent<
      EmergencyLockdownEvent.InputTuple,
      EmergencyLockdownEvent.OutputTuple,
      EmergencyLockdownEvent.OutputObject
    >;
    EmergencyLockdown: TypedContractEvent<
      EmergencyLockdownEvent.InputTuple,
      EmergencyLockdownEvent.OutputTuple,
      EmergencyLockdownEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NodeBlacklisted(address,string,uint256)": TypedContractEvent<
      NodeBlacklistedEvent.InputTuple,
      NodeBlacklistedEvent.OutputTuple,
      NodeBlacklistedEvent.OutputObject
    >;
    NodeBlacklisted: TypedContractEvent<
      NodeBlacklistedEvent.InputTuple,
      NodeBlacklistedEvent.OutputTuple,
      NodeBlacklistedEvent.OutputObject
    >;

    "NodeWhitelisted(address,uint256)": TypedContractEvent<
      NodeWhitelistedEvent.InputTuple,
      NodeWhitelistedEvent.OutputTuple,
      NodeWhitelistedEvent.OutputObject
    >;
    NodeWhitelisted: TypedContractEvent<
      NodeWhitelistedEvent.InputTuple,
      NodeWhitelistedEvent.OutputTuple,
      NodeWhitelistedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RateLimitExceeded(address,uint256,uint256)": TypedContractEvent<
      RateLimitExceededEvent.InputTuple,
      RateLimitExceededEvent.OutputTuple,
      RateLimitExceededEvent.OutputObject
    >;
    RateLimitExceeded: TypedContractEvent<
      RateLimitExceededEvent.InputTuple,
      RateLimitExceededEvent.OutputTuple,
      RateLimitExceededEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SecurityLevelChanged(uint256,uint256,uint256)": TypedContractEvent<
      SecurityLevelChangedEvent.InputTuple,
      SecurityLevelChangedEvent.OutputTuple,
      SecurityLevelChangedEvent.OutputObject
    >;
    SecurityLevelChanged: TypedContractEvent<
      SecurityLevelChangedEvent.InputTuple,
      SecurityLevelChangedEvent.OutputTuple,
      SecurityLevelChangedEvent.OutputObject
    >;

    "ThreatDetected(address,string,uint256,string,uint256)": TypedContractEvent<
      ThreatDetectedEvent.InputTuple,
      ThreatDetectedEvent.OutputTuple,
      ThreatDetectedEvent.OutputObject
    >;
    ThreatDetected: TypedContractEvent<
      ThreatDetectedEvent.InputTuple,
      ThreatDetectedEvent.OutputTuple,
      ThreatDetectedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INodeManager {
  export type OracleNodeStruct = {
    nodeAddress: AddressLike;
    publicKey: BytesLike;
    state: BigNumberish;
    registrationTime: BigNumberish;
    lastActiveTime: BigNumberish;
    submissionCount: BigNumberish;
    consensusParticipation: BigNumberish;
    reputation: BigNumberish;
    isBackup: boolean;
  };

  export type OracleNodeStructOutput = [
    nodeAddress: string,
    publicKey: string,
    state: bigint,
    registrationTime: bigint,
    lastActiveTime: bigint,
    submissionCount: bigint,
    consensusParticipation: bigint,
    reputation: bigint,
    isBackup: boolean
  ] & {
    nodeAddress: string;
    publicKey: string;
    state: bigint;
    registrationTime: bigint;
    lastActiveTime: bigint;
    submissionCount: bigint;
    consensusParticipation: bigint;
    reputation: bigint;
    isBackup: boolean;
  };

  export type RotationScheduleStruct = {
    currentSubmitter: AddressLike;
    nextSubmitter: AddressLike;
    rotationTime: BigNumberish;
    rotationInterval: BigNumberish;
  };

  export type RotationScheduleStructOutput = [
    currentSubmitter: string,
    nextSubmitter: string,
    rotationTime: bigint,
    rotationInterval: bigint
  ] & {
    currentSubmitter: string;
    nextSubmitter: string;
    rotationTime: bigint;
    rotationInterval: bigint;
  };
}

export interface NodeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_ROTATION_INTERVAL"
      | "EMERGENCY_ROLE"
      | "MAX_NODES"
      | "MAX_REPUTATION"
      | "MIN_ACTIVE_NODES"
      | "MIN_REPUTATION"
      | "ORACLE_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "activateBackupNode"
      | "activateNode"
      | "canNodeSubmit"
      | "deactivateNode"
      | "emergencyActivateBackup"
      | "forceRotation"
      | "getAllActiveNodes"
      | "getBackupNodes"
      | "getCurrentSubmitter"
      | "getNextSubmitter"
      | "getNode"
      | "getNodeReputation"
      | "getRoleAdmin"
      | "getRotationSchedule"
      | "getSubmitterNodes"
      | "getTotalActiveNodes"
      | "getValidatorNodes"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isNodeActive"
      | "isNodeSubmitter"
      | "isNodeValidator"
      | "paused"
      | "proxiableUUID"
      | "recordConsensusParticipation"
      | "recordNodeActivity"
      | "registerNode"
      | "renounceRole"
      | "revokeRole"
      | "rotateSubmitter"
      | "setRotationInterval"
      | "supportsInterface"
      | "suspendNode"
      | "updateNodeReputation"
      | "upgradeToAndCall"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BackupNodeActivated"
      | "EmergencyNodeActivation"
      | "Initialized"
      | "NodeActivated"
      | "NodeDeactivated"
      | "NodeManagerInitialized"
      | "NodeRegistered"
      | "NodeReputationDecayed"
      | "NodeReputationUpdated"
      | "NodeSuspended"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RotationIntervalUpdated"
      | "SubmitterRotated"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ROTATION_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_NODES", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ACTIVE_NODES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REPUTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateBackupNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activateNode",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canNodeSubmit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActivateBackup",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRotation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBackupNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRotationSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmitterNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeActive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeSubmitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isNodeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordConsensusParticipation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordNodeActivity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateSubmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRotationInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendNode",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ROTATION_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_NODES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ACTIVE_NODES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REPUTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateBackupNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canNodeSubmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActivateBackup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRotation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackupNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodeReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRotationSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmitterNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNodeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordConsensusParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordNodeActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateSubmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRotationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace BackupNodeActivatedEvent {
  export type InputTuple = [
    backupNode: AddressLike,
    failedNode: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    backupNode: string,
    failedNode: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    backupNode: string;
    failedNode: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyNodeActivationEvent {
  export type InputTuple = [
    node: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeActivatedEvent {
  export type InputTuple = [
    node: AddressLike,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, newState: bigint, timestamp: bigint];
  export interface OutputObject {
    node: string;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeDeactivatedEvent {
  export type InputTuple = [
    node: AddressLike,
    previousState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    previousState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    previousState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeManagerInitializedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeRegisteredEvent {
  export type InputTuple = [
    node: AddressLike,
    publicKey: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    publicKey: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    node: string;
    publicKey: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeReputationDecayedEvent {
  export type InputTuple = [
    node: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    node: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeReputationUpdatedEvent {
  export type InputTuple = [
    node: AddressLike,
    oldReputation: BigNumberish,
    newReputation: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    oldReputation: bigint,
    newReputation: bigint
  ];
  export interface OutputObject {
    node: string;
    oldReputation: bigint;
    newReputation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeSuspendedEvent {
  export type InputTuple = [
    node: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [node: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    node: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RotationIntervalUpdatedEvent {
  export type InputTuple = [
    oldInterval: BigNumberish,
    newInterval: BigNumberish,
    updatedBy: AddressLike
  ];
  export type OutputTuple = [
    oldInterval: bigint,
    newInterval: bigint,
    updatedBy: string
  ];
  export interface OutputObject {
    oldInterval: bigint;
    newInterval: bigint;
    updatedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitterRotatedEvent {
  export type InputTuple = [
    oldSubmitter: AddressLike,
    newSubmitter: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldSubmitter: string,
    newSubmitter: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldSubmitter: string;
    newSubmitter: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NodeManager extends BaseContract {
  connect(runner?: ContractRunner | null): NodeManager;
  waitForDeployment(): Promise<this>;

  interface: NodeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ROTATION_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  EMERGENCY_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_NODES: TypedContractMethod<[], [bigint], "view">;

  MAX_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  MIN_ACTIVE_NODES: TypedContractMethod<[], [bigint], "view">;

  MIN_REPUTATION: TypedContractMethod<[], [bigint], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  activateBackupNode: TypedContractMethod<
    [failedNode: AddressLike],
    [string],
    "nonpayable"
  >;

  activateNode: TypedContractMethod<
    [nodeAddress: AddressLike, targetState: BigNumberish],
    [void],
    "nonpayable"
  >;

  canNodeSubmit: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  deactivateNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  emergencyActivateBackup: TypedContractMethod<
    [failedNode: AddressLike, backupNode: AddressLike],
    [void],
    "nonpayable"
  >;

  forceRotation: TypedContractMethod<
    [newSubmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllActiveNodes: TypedContractMethod<[], [string[]], "view">;

  getBackupNodes: TypedContractMethod<[], [string[]], "view">;

  getCurrentSubmitter: TypedContractMethod<[], [string], "view">;

  getNextSubmitter: TypedContractMethod<[], [string], "view">;

  getNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [INodeManager.OracleNodeStructOutput],
    "view"
  >;

  getNodeReputation: TypedContractMethod<[node: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRotationSchedule: TypedContractMethod<
    [],
    [INodeManager.RotationScheduleStructOutput],
    "view"
  >;

  getSubmitterNodes: TypedContractMethod<[], [string[]], "view">;

  getTotalActiveNodes: TypedContractMethod<[], [bigint], "view">;

  getValidatorNodes: TypedContractMethod<[], [string[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  isNodeActive: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isNodeSubmitter: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  isNodeValidator: TypedContractMethod<[node: AddressLike], [boolean], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  recordConsensusParticipation: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  recordNodeActivity: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registerNode: TypedContractMethod<
    [nodeAddress: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rotateSubmitter: TypedContractMethod<[], [string], "nonpayable">;

  setRotationInterval: TypedContractMethod<
    [newInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  suspendNode: TypedContractMethod<
    [nodeAddress: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  updateNodeReputation: TypedContractMethod<
    [nodeAddress: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ROTATION_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMERGENCY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_NODES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ACTIVE_NODES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REPUTATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateBackupNode"
  ): TypedContractMethod<[failedNode: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "activateNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, targetState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canNodeSubmit"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyActivateBackup"
  ): TypedContractMethod<
    [failedNode: AddressLike, backupNode: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceRotation"
  ): TypedContractMethod<[newSubmitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllActiveNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBackupNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCurrentSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextSubmitter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike],
    [INodeManager.OracleNodeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodeReputation"
  ): TypedContractMethod<[node: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRotationSchedule"
  ): TypedContractMethod<
    [],
    [INodeManager.RotationScheduleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmitterNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalActiveNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidatorNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isNodeActive"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNodeSubmitter"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isNodeValidator"
  ): TypedContractMethod<[node: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordConsensusParticipation"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recordNodeActivity"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, publicKey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rotateSubmitter"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setRotationInterval"
  ): TypedContractMethod<[newInterval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "suspendNode"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNodeReputation"
  ): TypedContractMethod<
    [nodeAddress: AddressLike, newReputation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BackupNodeActivated"
  ): TypedContractEvent<
    BackupNodeActivatedEvent.InputTuple,
    BackupNodeActivatedEvent.OutputTuple,
    BackupNodeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyNodeActivation"
  ): TypedContractEvent<
    EmergencyNodeActivationEvent.InputTuple,
    EmergencyNodeActivationEvent.OutputTuple,
    EmergencyNodeActivationEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NodeActivated"
  ): TypedContractEvent<
    NodeActivatedEvent.InputTuple,
    NodeActivatedEvent.OutputTuple,
    NodeActivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeDeactivated"
  ): TypedContractEvent<
    NodeDeactivatedEvent.InputTuple,
    NodeDeactivatedEvent.OutputTuple,
    NodeDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeManagerInitialized"
  ): TypedContractEvent<
    NodeManagerInitializedEvent.InputTuple,
    NodeManagerInitializedEvent.OutputTuple,
    NodeManagerInitializedEvent.OutputObject
  >;
  getEvent(
    key: "NodeRegistered"
  ): TypedContractEvent<
    NodeRegisteredEvent.InputTuple,
    NodeRegisteredEvent.OutputTuple,
    NodeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NodeReputationDecayed"
  ): TypedContractEvent<
    NodeReputationDecayedEvent.InputTuple,
    NodeReputationDecayedEvent.OutputTuple,
    NodeReputationDecayedEvent.OutputObject
  >;
  getEvent(
    key: "NodeReputationUpdated"
  ): TypedContractEvent<
    NodeReputationUpdatedEvent.InputTuple,
    NodeReputationUpdatedEvent.OutputTuple,
    NodeReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NodeSuspended"
  ): TypedContractEvent<
    NodeSuspendedEvent.InputTuple,
    NodeSuspendedEvent.OutputTuple,
    NodeSuspendedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RotationIntervalUpdated"
  ): TypedContractEvent<
    RotationIntervalUpdatedEvent.InputTuple,
    RotationIntervalUpdatedEvent.OutputTuple,
    RotationIntervalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitterRotated"
  ): TypedContractEvent<
    SubmitterRotatedEvent.InputTuple,
    SubmitterRotatedEvent.OutputTuple,
    SubmitterRotatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "BackupNodeActivated(address,address,uint256)": TypedContractEvent<
      BackupNodeActivatedEvent.InputTuple,
      BackupNodeActivatedEvent.OutputTuple,
      BackupNodeActivatedEvent.OutputObject
    >;
    BackupNodeActivated: TypedContractEvent<
      BackupNodeActivatedEvent.InputTuple,
      BackupNodeActivatedEvent.OutputTuple,
      BackupNodeActivatedEvent.OutputObject
    >;

    "EmergencyNodeActivation(address,string,uint256)": TypedContractEvent<
      EmergencyNodeActivationEvent.InputTuple,
      EmergencyNodeActivationEvent.OutputTuple,
      EmergencyNodeActivationEvent.OutputObject
    >;
    EmergencyNodeActivation: TypedContractEvent<
      EmergencyNodeActivationEvent.InputTuple,
      EmergencyNodeActivationEvent.OutputTuple,
      EmergencyNodeActivationEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NodeActivated(address,uint8,uint256)": TypedContractEvent<
      NodeActivatedEvent.InputTuple,
      NodeActivatedEvent.OutputTuple,
      NodeActivatedEvent.OutputObject
    >;
    NodeActivated: TypedContractEvent<
      NodeActivatedEvent.InputTuple,
      NodeActivatedEvent.OutputTuple,
      NodeActivatedEvent.OutputObject
    >;

    "NodeDeactivated(address,uint8,uint256)": TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;
    NodeDeactivated: TypedContractEvent<
      NodeDeactivatedEvent.InputTuple,
      NodeDeactivatedEvent.OutputTuple,
      NodeDeactivatedEvent.OutputObject
    >;

    "NodeManagerInitialized(address,uint256)": TypedContractEvent<
      NodeManagerInitializedEvent.InputTuple,
      NodeManagerInitializedEvent.OutputTuple,
      NodeManagerInitializedEvent.OutputObject
    >;
    NodeManagerInitialized: TypedContractEvent<
      NodeManagerInitializedEvent.InputTuple,
      NodeManagerInitializedEvent.OutputTuple,
      NodeManagerInitializedEvent.OutputObject
    >;

    "NodeRegistered(address,bytes,uint256)": TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;
    NodeRegistered: TypedContractEvent<
      NodeRegisteredEvent.InputTuple,
      NodeRegisteredEvent.OutputTuple,
      NodeRegisteredEvent.OutputObject
    >;

    "NodeReputationDecayed(address,uint8,uint8)": TypedContractEvent<
      NodeReputationDecayedEvent.InputTuple,
      NodeReputationDecayedEvent.OutputTuple,
      NodeReputationDecayedEvent.OutputObject
    >;
    NodeReputationDecayed: TypedContractEvent<
      NodeReputationDecayedEvent.InputTuple,
      NodeReputationDecayedEvent.OutputTuple,
      NodeReputationDecayedEvent.OutputObject
    >;

    "NodeReputationUpdated(address,uint8,uint8)": TypedContractEvent<
      NodeReputationUpdatedEvent.InputTuple,
      NodeReputationUpdatedEvent.OutputTuple,
      NodeReputationUpdatedEvent.OutputObject
    >;
    NodeReputationUpdated: TypedContractEvent<
      NodeReputationUpdatedEvent.InputTuple,
      NodeReputationUpdatedEvent.OutputTuple,
      NodeReputationUpdatedEvent.OutputObject
    >;

    "NodeSuspended(address,string,uint256)": TypedContractEvent<
      NodeSuspendedEvent.InputTuple,
      NodeSuspendedEvent.OutputTuple,
      NodeSuspendedEvent.OutputObject
    >;
    NodeSuspended: TypedContractEvent<
      NodeSuspendedEvent.InputTuple,
      NodeSuspendedEvent.OutputTuple,
      NodeSuspendedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RotationIntervalUpdated(uint256,uint256,address)": TypedContractEvent<
      RotationIntervalUpdatedEvent.InputTuple,
      RotationIntervalUpdatedEvent.OutputTuple,
      RotationIntervalUpdatedEvent.OutputObject
    >;
    RotationIntervalUpdated: TypedContractEvent<
      RotationIntervalUpdatedEvent.InputTuple,
      RotationIntervalUpdatedEvent.OutputTuple,
      RotationIntervalUpdatedEvent.OutputObject
    >;

    "SubmitterRotated(address,address,uint256)": TypedContractEvent<
      SubmitterRotatedEvent.InputTuple,
      SubmitterRotatedEvent.OutputTuple,
      SubmitterRotatedEvent.OutputObject
    >;
    SubmitterRotated: TypedContractEvent<
      SubmitterRotatedEvent.InputTuple,
      SubmitterRotatedEvent.OutputTuple,
      SubmitterRotatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IConsensusEngine,
  IConsensusEngineInterface,
} from "../../../contracts/interfaces/IConsensusEngine";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "oldMethod",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "newMethod",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AggregationMethodChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "totalVotes",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "requiredVotes",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "ConsensusFailed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "finalCexFees",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "finalDexFees",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "participatingNodes",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "agreementPercentage",
        type: "uint8",
      },
    ],
    name: "ConsensusReached",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "node",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deviation",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "OutlierDetected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "cexFees",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "dexFees",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "weight",
        type: "uint8",
      },
    ],
    name: "VoteCast",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "aggregateData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "aggregatedCexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "aggregatedDexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint8",
            name: "confidence",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "variance",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "method",
            type: "string",
          },
        ],
        internalType: "struct IConsensusEngine.AggregationResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "data1",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "data2",
        type: "uint256[]",
      },
    ],
    name: "calculateDeviation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "cexFees",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "dexFees",
        type: "uint256[]",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "detectOutliers",
    outputs: [
      {
        internalType: "address[]",
        name: "outliers",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "finalizeRound",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "cexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "dexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "consensusReached",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "participatingNodes",
            type: "uint8",
          },
        ],
        internalType: "struct IQuantlinkOracle.FeeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAggregationMethod",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getAggregationResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "aggregatedCexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "aggregatedDexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint8",
            name: "confidence",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "variance",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "method",
            type: "string",
          },
        ],
        internalType: "struct IConsensusEngine.AggregationResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getConsensusStats",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "totalVotes",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "requiredVotes",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "consensusReached",
            type: "bool",
          },
          {
            internalType: "uint8",
            name: "agreementPercentage",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "outlierNodes",
            type: "address[]",
          },
        ],
        internalType: "struct IConsensusEngine.ConsensusStats",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getConsensusThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getCurrentRoundVotes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "voter",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "cexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "dexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "weight",
            type: "uint8",
          },
        ],
        internalType: "struct IConsensusEngine.Vote[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequiredVotes",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "node",
        type: "address",
      },
    ],
    name: "getVoteWeight",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "node",
        type: "address",
      },
    ],
    name: "hasNodeVoted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "isConsensusReached",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "processConsensus",
    outputs: [
      {
        internalType: "bool",
        name: "consensusReached",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "resetRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "method",
        type: "string",
      },
    ],
    name: "setAggregationMethod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "newThreshold",
        type: "uint8",
      },
    ],
    name: "setConsensusThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "setOutlierDetectionThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IConsensusEngine__factory {
  static readonly abi = _abi;
  static createInterface(): IConsensusEngineInterface {
    return new Interface(_abi) as IConsensusEngineInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IConsensusEngine {
    return new Contract(address, _abi, runner) as unknown as IConsensusEngine;
  }
}

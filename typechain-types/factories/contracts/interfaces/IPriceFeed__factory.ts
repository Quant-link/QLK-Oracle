/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPriceFeed,
  IPriceFeedInterface,
} from "../../../contracts/interfaces/IPriceFeed";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "source",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DataSourceAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "source",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DataSourceRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "cexFees",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "dexFees",
        type: "uint256[]",
      },
      {
        indexed: true,
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "FeeDataUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "price",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "confidence",
        type: "uint8",
      },
    ],
    name: "PriceUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeWindow",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "feeType",
        type: "uint8",
      },
    ],
    name: "getAverageFee",
    outputs: [
      {
        internalType: "uint256",
        name: "averageFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sampleCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataFreshness",
    outputs: [
      {
        internalType: "bool",
        name: "isFresh",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "lastUpdateTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stalenessThreshold",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataQualityMetrics",
    outputs: [
      {
        internalType: "uint8",
        name: "accuracy",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "precision",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "reliability",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "coverage",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEmergencyStatus",
    outputs: [
      {
        internalType: "bool",
        name: "isEmergency",
        type: "bool",
      },
      {
        internalType: "string",
        name: "emergencyType",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "emergencyStartTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFallbackInfo",
    outputs: [
      {
        internalType: "bool",
        name: "hasFallback",
        type: "bool",
      },
      {
        internalType: "string",
        name: "fallbackSource",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "fallbackTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "getFeeDataAtRound",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "cexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "dexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "exchangeCount",
            type: "uint8",
          },
        ],
        internalType: "struct IPriceFeed.FeeData",
        name: "feeData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timeWindow",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "feeType",
        type: "uint8",
      },
    ],
    name: "getFeeVolatility",
    outputs: [
      {
        internalType: "uint256",
        name: "volatility",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "confidence",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxResults",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "includeMetadata",
            type: "bool",
          },
        ],
        internalType: "struct IPriceFeed.HistoricalQuery",
        name: "query",
        type: "tuple",
      },
    ],
    name: "getHistoricalFeeData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "cexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "dexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "exchangeCount",
            type: "uint8",
          },
        ],
        internalType: "struct IPriceFeed.FeeData[]",
        name: "feeHistory",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxResults",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "includeMetadata",
            type: "bool",
          },
        ],
        internalType: "struct IPriceFeed.HistoricalQuery",
        name: "query",
        type: "tuple",
      },
    ],
    name: "getHistoricalPriceData",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "confidence",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "source",
            type: "string",
          },
        ],
        internalType: "struct IPriceFeed.PriceData[]",
        name: "priceHistory",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestFeeData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "cexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "dexFees",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "exchangeCount",
            type: "uint8",
          },
        ],
        internalType: "struct IPriceFeed.FeeData",
        name: "feeData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestPriceData",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "confidence",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "source",
            type: "string",
          },
        ],
        internalType: "struct IPriceFeed.PriceData",
        name: "priceData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOracleHealth",
    outputs: [
      {
        internalType: "bool",
        name: "isHealthy",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "consensusReached",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "activeNodes",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "lastConsensusTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "getPriceDataAtRound",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "price",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "roundId",
            type: "uint80",
          },
          {
            internalType: "uint8",
            name: "confidence",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "source",
            type: "string",
          },
        ],
        internalType: "struct IPriceFeed.PriceData",
        name: "priceData",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupportedSources",
    outputs: [
      {
        internalType: "string[]",
        name: "sources",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "feeThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeThreshold",
        type: "uint256",
      },
    ],
    name: "subscribeToFeeUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "priceThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timeThreshold",
        type: "uint256",
      },
    ],
    name: "subscribeToPriceUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
    ],
    name: "unsubscribeFromFeeUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
    ],
    name: "unsubscribeFromPriceUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IPriceFeed__factory {
  static readonly abi = _abi;
  static createInterface(): IPriceFeedInterface {
    return new Interface(_abi) as IPriceFeedInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IPriceFeed {
    return new Contract(address, _abi, runner) as unknown as IPriceFeed;
  }
}
